TITLE: Install Google Analytics Data Python Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to install the Google Analytics Data Python client library on Mac or Linux systems. It demonstrates creating and activating a virtual environment using 'venv' before installing the library with pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-data/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-analytics-data
```

----------------------------------------

TITLE: Install Google Cloud Secure Source Manager Python Client Library
DESCRIPTION: This snippet provides instructions for installing the Google Cloud Secure Source Manager Python client library using `venv` for isolated environments. It includes commands for both Mac/Linux and Windows operating systems, ensuring dependencies are managed separately from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securesourcemanager/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-securesourcemanager
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-securesourcemanager
```

----------------------------------------

TITLE: Install Google Cloud IAP Python Client Library
DESCRIPTION: Instructions for installing the `google-cloud-iap` Python client library using `venv` on different operating systems. This process creates an isolated Python environment and installs the necessary package without requiring system permissions.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iap/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-iap
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-iap
```

----------------------------------------

TITLE: Install Google Cloud Vision Python Client on Windows
DESCRIPTION: This snippet provides instructions for creating a Python virtual environment and installing the `google-cloud-vision` client library on Windows. It helps manage project-specific dependencies without conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-vision
```

----------------------------------------

TITLE: Install Google Cloud App Hub Python Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-apphub` library on Mac or Linux systems. Using a virtual environment helps isolate project dependencies and avoids conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apphub/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-apphub
```

----------------------------------------

TITLE: Python gRPC Client Thread Safety and Multiprocessing Guidelines
DESCRIPTION: This documentation note clarifies that Python gRPC client instances, built on the `grpc` library, are thread-safe and can be shared across threads. For multiprocessing scenarios, it strongly recommends creating new client instances *after* the `os.fork` call, typically when using `multiprocessing.pool.Pool` or `multiprocessing.Process`, to ensure proper resource management and avoid issues.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Because this client uses grpc library, it is safe to share instances across threads. In multiprocessing scenarios, the best practice is to create client instances after the invocation of os.fork by multiprocessing.pool.Pool or multiprocessing.Process.
```

----------------------------------------

TITLE: Install Google Cloud Public CA Library on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-public-ca` library on macOS and Linux systems. Using a virtual environment ensures isolated dependencies for your project, preventing conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-public-ca
```

----------------------------------------

TITLE: Install Google Cloud Service Usage Library on Mac/Linux
DESCRIPTION: This snippet provides command-line instructions to set up a Python virtual environment and install the `google-cloud-service-usage` library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-usage/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-service-usage
```

----------------------------------------

TITLE: Install Google Cloud Monitoring Dashboards Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-monitoring-dashboards` client library on macOS or Linux systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-dashboards/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-monitoring-dashboards
```

----------------------------------------

TITLE: Install GDC Hardware Management Python Client on Mac/Linux
DESCRIPTION: Commands to set up a virtual environment and install the google-cloud-gdchardwaremanagement library on macOS or Linux systems, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gdchardwaremanagement/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-gdchardwaremanagement
```

----------------------------------------

TITLE: Configure Logging Handlers Programmatically in Python
DESCRIPTION: These Python examples illustrate how to configure logging handlers using the standard `logging` module. You can obtain a logger for all Google-based modules or a specific client library, then attach a `StreamHandler` and set the desired logging level (e.g., `logging.DEBUG`). This approach offers fine-grained control over logging behavior, including the ability to explicitly control log propagation to the root logger by setting `logging.getLogger("google").propagate = True`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Policy Troubleshooter IAM Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-cloud-policytroubleshooter-iam` library on Mac or Linux systems. It ensures project dependencies are isolated from system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-policytroubleshooter-iam
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Python Code)
DESCRIPTION: This Python code illustrates how to set up a stream handler and define the logging level (DEBUG) for a particular Google Cloud client library, such as 'google.cloud.library_v1', using Python's standard 'logging' mechanism.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms-inventory/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting an environment variable. This configures logging for any Google Cloud Python client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-connect/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Memcache Python Client on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-memcache` library on macOS and Linux systems. This process isolates project dependencies from system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memcache/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-memcache
```

----------------------------------------

TITLE: Install Google Cloud Data QnA Python Client on Windows
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-cloud-data-qna` library on Windows. It uses `venv` for environment isolation and `pip` for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-data-qna
```

----------------------------------------

TITLE: Install Google Cloud Rapid Migration Assessment Library on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a virtual environment using `venv` and install the `google-cloud-rapidmigrationassessment` Python client library on Mac/Linux operating systems. This ensures an isolated environment for project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-rapidmigrationassessment/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-rapidmigrationassessment
```

----------------------------------------

TITLE: Install Google Cloud Retail Python Client on Mac/Linux
DESCRIPTION: This snippet provides shell commands to install the Google Cloud Retail Python client library on Mac or Linux systems. It leverages 'virtualenv' to create an isolated Python environment before installing the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-retail/docs/README.rst#_snippet_0

LANGUAGE: shell
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-retail
```

----------------------------------------

TITLE: Install Google Cloud Data Catalog Python Client
DESCRIPTION: These snippets demonstrate how to set up a Python virtual environment and install the `google-cloud-datacatalog` library, isolating project dependencies. Instructions are provided for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datacatalog/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-datacatalog
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-datacatalog
```

----------------------------------------

TITLE: Install Google Cloud Monitoring Metrics Scopes on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-monitoring-metrics-scopes` library on macOS or Linux systems. It ensures project dependencies are isolated from other projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-metrics-scopes/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-monitoring-metrics-scopes
```

----------------------------------------

TITLE: Install Google Cloud Document AI Warehouse Client Library
DESCRIPTION: These commands demonstrate how to install the Google Cloud Document AI Warehouse client library within a Python virtual environment on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contentwarehouse/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-contentwarehouse
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-contentwarehouse
```

----------------------------------------

TITLE: Install Google Cloud IDS Python Client on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud IDS Python client library on Mac or Linux systems using a virtual environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-ids/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-ids
```

----------------------------------------

TITLE: Install Google Maps Places Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-maps-places` client library on Mac/Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-places/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-places
```

----------------------------------------

TITLE: Migrate Dialogflow method calls from positional arguments to request objects
DESCRIPTION: This snippet illustrates the breaking change in method call patterns for `google-cloud-dialogflow`. Previously, methods accepted positional and keyword arguments directly. Now, methods primarily expect a single `request` object containing all parameters. The 'After' example shows how to construct a dictionary for the `request` parameter.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/UPGRADING.md#_snippet_2

LANGUAGE: python
CODE:
```
import dialogflow
client = dialogflow.ContextsClient()

response = client.list_contexts(parent="projects/1337/agent/sessions/1024")
```

LANGUAGE: python
CODE:
```
from google.cloud import dialogflow

client = dialogflow.ContextsClient()

response = client.list_contexts(request={"parent": "projects/1337/agent/sessions/1024", page_size=10})
```

----------------------------------------

TITLE: Python gRPC Client Concurrency Best Practices
DESCRIPTION: This documentation provides critical guidance for managing gRPC client instances in concurrent Python applications. It highlights that gRPC clients are inherently thread-safe but require specific handling in multiprocessing scenarios to avoid issues related to process forking.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Client Concurrency Guidelines:
  Thread Safety:
    - gRPC client instances are safe to share across threads.
  Multiprocessing Scenarios:
    - Best Practice: Create client instances *after* the invocation of `os.fork`.
    - Relevant Modules: `multiprocessing.pool.Pool`, `multiprocessing.Process`.
```

----------------------------------------

TITLE: Install BigQuery Data Transfer Client Library on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-bigquery-datatransfer` library on Windows. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datatransfer/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-bigquery-datatransfer
```

----------------------------------------

TITLE: Install Google Maps Route Optimization Library on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the google-maps-routeoptimization library on Windows systems using pip. It ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-routeoptimization/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-routeoptimization
```

----------------------------------------

TITLE: Install Google Shopping Merchant Inventories Library
DESCRIPTION: These snippets provide instructions for setting up a Python virtual environment and installing the `google-shopping-merchant-inventories` library on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-inventories/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-inventories
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-inventories
```

----------------------------------------

TITLE: Install Google Cloud Device Streaming Python Library on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a virtual environment and install the `google-cloud-devicestreaming` Python client library on macOS and Linux systems. It ensures dependency isolation and avoids system-wide package conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-devicestreaming/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-devicestreaming
```

----------------------------------------

TITLE: Install Google Cloud Monitoring Library on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-monitoring` library on Windows systems using the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-monitoring
```

----------------------------------------

TITLE: Install Google Apps Card Python Client
DESCRIPTION: Instructions for installing the Google Apps Card Python client library using `venv` on different operating systems (Mac/Linux and Windows). This sets up an isolated Python environment and installs the necessary package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-card/docs/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-apps-card
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-card
```

----------------------------------------

TITLE: Install Google Cloud Service Usage Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-cloud-service-usage` library on Mac or Linux systems. Using `venv` ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-usage/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-service-usage
```

----------------------------------------

TITLE: Install Google Cloud Network Connectivity Python Client Library
DESCRIPTION: These snippets provide instructions for installing the Google Cloud Network Connectivity Python client library using a virtual environment (venv) and pip, for both Mac/Linux and Windows operating systems. Using venv helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-network-connectivity
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-network-connectivity
```

----------------------------------------

TITLE: Install Google Cloud Functions Client Library
DESCRIPTION: Instructions to install the Google Cloud Functions client library using a Python virtual environment on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-functions/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-functions
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-functions
```

----------------------------------------

TITLE: Install Google Shopping Type Client Library on Windows
DESCRIPTION: Provides commands to set up a virtual environment using `venv` and install the `google-shopping-type` Python client library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-type/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-type
```

----------------------------------------

TITLE: Install BigQuery Connection Library on Windows
DESCRIPTION: Installs the google-cloud-bigquery-connection library within a virtual environment on Windows, providing an isolated Python environment to manage project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-connection/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-bigquery-connection
```

----------------------------------------

TITLE: Install Google Cloud Backup and DR Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to create a Python virtual environment and install the `google-cloud-backupdr` client library on macOS or Linux. Using a virtual environment isolates project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/README.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-backupdr
```

----------------------------------------

TITLE: Install Google Shopping CSS Python Library
DESCRIPTION: Instructions for installing the Google Shopping CSS Python client library using a virtual environment on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-css
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-css
```

----------------------------------------

TITLE: Install Google Cloud Service Control on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment using `venv` and install the `google-cloud-service-control` library on Mac or Linux systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-control/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-service-control
```

----------------------------------------

TITLE: Install Google Cloud Contact Center AI Insights Python Client on Mac/Linux
DESCRIPTION: Installs the Google Cloud Contact Center AI Insights Python client library in a virtual environment on Mac or Linux systems. This creates an isolated environment to manage project dependencies, preventing conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-contact-center-insights
```

----------------------------------------

TITLE: Install BigLake API Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-bigquery-biglake` library on Mac or Linux systems. Using `venv` ensures that the library's dependencies are isolated from other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-biglake/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bigquery-biglake
```

----------------------------------------

TITLE: Install Google Cloud Dialogflow CX Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment using `venv` and install the `google-cloud-dialogflow-cx` library on Mac/Linux operating systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow-cx/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dialogflow-cx
```

----------------------------------------

TITLE: Install Google Cloud Redis Client Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-redis` library on macOS and Linux systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-redis
```

----------------------------------------

TITLE: Install BeyondCorp AppConnections Python Client
DESCRIPTION: Instructions to install the Google Cloud BeyondCorp AppConnections Python client library using a virtual environment (venv) on different operating systems. This ensures isolated project dependencies and avoids conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-beyondcorp-appconnections
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-beyondcorp-appconnections
```

----------------------------------------

TITLE: Install Google Cloud Contact Center AI Insights Python Client on Windows
DESCRIPTION: Installs the Google Cloud Contact Center AI Insights Python client library in a virtual environment on Windows systems. This creates an isolated environment to manage project dependencies, preventing conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-contact-center-insights
```

----------------------------------------

TITLE: Install Google Cloud API Hub Python Client
DESCRIPTION: These snippets provide the console commands to set up a Python virtual environment and install the `google-cloud-apihub` library on different operating systems (Mac/Linux and Windows). This ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apihub/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-apihub
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-apihub
```

----------------------------------------

TITLE: Install Google BigQuery Migration Python Client Library
DESCRIPTION: Instructions for installing the Google BigQuery Migration Python client library using `venv` to create isolated Python environments. This snippet provides commands for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-migration/docs/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bigquery-migration
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-bigquery-migration
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python Code)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a StreamHandler for the base 'google' logger, setting its level to DEBUG. This ensures all logging events from Google Cloud Python libraries are captured and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-channel/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Policy Troubleshooter Python Client with virtualenv
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Policy Troubleshooter Python client library using `virtualenv`. It sets up an isolated Python environment and installs the necessary package, preventing dependency conflicts. Instructions are provided for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policy-troubleshooter/docs/README.rst#_snippet_0

LANGUAGE: Console (Mac/Linux)
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-policy-troubleshooter
```

LANGUAGE: Console (Windows)
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-policy-troubleshooter
```

----------------------------------------

TITLE: Install Google Cloud Service Directory Python Client
DESCRIPTION: Instructions for installing the `google-cloud-service-directory` library using a Python virtual environment (`venv`). This ensures isolated dependencies and avoids conflicts with system-wide packages. Commands are provided for both Mac/Linux and Windows.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-service-directory
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-service-directory
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Loggers (Code-Based)
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`, providing explicit control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc-publishing/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Enterprise Knowledge Graph Python Client on Mac/Linux
DESCRIPTION: This snippet outlines the commands to create a Python virtual environment and install the `google-cloud-enterpriseknowledgegraph` library on macOS or Linux. It ensures an isolated environment for project dependencies, preventing conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-enterpriseknowledgegraph/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-enterpriseknowledgegraph
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` to capture detailed events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-ids/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python)
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers by getting the 'google' logger and adding a `StreamHandler`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Monitoring Dashboards Client Library
DESCRIPTION: Installs the Google Cloud Monitoring Dashboards client library in a virtual environment using `venv` and `pip` for different operating systems. This method isolates project dependencies and avoids system-wide permission issues.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-dashboards/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-monitoring-dashboards
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-monitoring-dashboards
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling default logging handlers for all Google-based loggers in Python client libraries. This affects any Google Cloud Python SDKs used in the current environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud IAM Policy Troubleshooter Python Client Library
DESCRIPTION: Instructions to install the `google-cloud-policy-troubleshooter` library using `pip` within a Python virtual environment for different operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policy-troubleshooter/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-policy-troubleshooter
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-policy-troubleshooter
```

----------------------------------------

TITLE: Install Python Client for Last Mile Fleet Solution Delivery API on Mac/Linux
DESCRIPTION: Provides commands to set up a Python virtual environment and install the `google-maps-fleetengine-delivery` library on Mac/Linux operating systems. This ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-fleetengine-delivery
```

----------------------------------------

TITLE: Install Google Cloud Public CA Library on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-public-ca` library on Windows systems. Utilizing a virtual environment helps manage project-specific dependencies without affecting other Python installations on your system.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-public-ca
```

----------------------------------------

TITLE: Install Google Cloud Monitoring Dashboards Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-monitoring-dashboards` client library on Windows systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-dashboards/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-monitoring-dashboards
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler for the top-level 'google' logger, setting its level to DEBUG. This ensures all logging events from Google Cloud Python libraries are captured and outputted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-metrics-scopes/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Modules
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, providing detailed logging for all Google SDK components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-datasources/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Service Management Library on Mac/Linux
DESCRIPTION: Instructions to install the `google-cloud-service-management` Python library on Mac/Linux using `virtualenv` to create an isolated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-management/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-service-management
```

----------------------------------------

TITLE: Configure Logging for All Google Modules in Python
DESCRIPTION: Illustrates how to configure a logging handler and level for all Google-based loggers using Python's standard `logging` mechanism. It sets a `StreamHandler` and `DEBUG` level for the 'google' logger, providing detailed output for all Google-related events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based modules are captured and outputted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-devicestreaming/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Redis Client Library
DESCRIPTION: Instructions to install the Google Cloud Redis client library using `venv` for both Mac/Linux and Windows environments. This process creates an isolated Python environment and installs the necessary package, preventing dependency conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-redis
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-redis
```

----------------------------------------

TITLE: Install Google Cloud Speech Library
DESCRIPTION: Instructions for installing the `google-cloud-speech` Python client library using `pip` within a virtual environment on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-speech
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-speech
```

----------------------------------------

TITLE: Install Google Cloud Private Catalog Python Client
DESCRIPTION: Instructions to install the Google Cloud Private Catalog Python client library using pip within a virtual environment on different operating systems (Mac/Linux and Windows). This ensures isolated dependencies and avoids system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-catalog/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-private-catalog
```

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-private-catalog
```

----------------------------------------

TITLE: Updating Method Calls for TraceServiceClient
DESCRIPTION: Compares the old and new ways of calling methods like `list_traces` on the `TraceServiceClient`. Previously, required parameters were positional; now, they must be passed as keyword arguments or within a request object.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/UPGRADING.md#_snippet_3

LANGUAGE: python
CODE:
```
from google.cloud import trace_v1

client = trace_v1.TraceServiceClient()
project_id = "my-project"
response = client.list_traces(project_id)
```

LANGUAGE: python
CODE:
```
from google.cloud import trace_v1

client = trace_v1.TraceServiceClient()
project_id = "my-project"
response = client.list_traces(project_id=project_id)
```

----------------------------------------

TITLE: Install Google Cloud Storage Insights Python Client Library
DESCRIPTION: These commands demonstrate how to set up a Python virtual environment and install the `google-cloud-storageinsights` library using `pip` on both Mac/Linux and Windows operating systems. A virtual environment isolates project dependencies, preventing conflicts with other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storageinsights/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-storageinsights
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-storageinsights
```

----------------------------------------

TITLE: Install Google Cloud Quotas Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Quotas Python client library on Mac or Linux systems using a virtual environment to manage dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-quotas/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-quotas
```

----------------------------------------

TITLE: Install Google Cloud Model Armor on Windows
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment and install the Google Cloud Model Armor client library on Windows. It ensures that project dependencies are isolated, preventing conflicts with other Python projects or system dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-modelarmor/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-modelarmor
```

----------------------------------------

TITLE: Install Google Cloud Run Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-run` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-run
```

----------------------------------------

TITLE: Install Google Cloud Service Health Library on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a virtual environment and install the `google-cloud-servicehealth` Python client library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-servicehealth
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python example demonstrates how to configure a stream handler and set the logging level (DEBUG) for all Google-based loggers using the standard 'logging' module. It targets the 'google' logger to apply settings broadly across Google client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Chat API Client Library on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the Google Chat API client library on macOS and Linux systems using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-apps-chat
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for the 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based Python libraries are handled and emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-enterpriseknowledgegraph/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Storage Control Python Library
DESCRIPTION: These commands guide users through setting up a Python virtual environment and installing the `google-cloud-storage-control` library using `pip`. This ensures isolated dependencies and avoids conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-storage-control
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-storage-control
```

----------------------------------------

TITLE: Install Google Cloud IAP Python Library on Mac/Linux
DESCRIPTION: This snippet provides commands to install the `google-cloud-iap` Python client library on macOS and Linux. It utilizes `venv` to create an isolated Python environment, preventing dependency conflicts with other projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iap/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-iap
```

----------------------------------------

TITLE: Install Google Shopping Merchant Notifications on Mac/Linux
DESCRIPTION: This snippet provides the command-line instructions to set up a Python virtual environment and install the `google-shopping-merchant-notifications` library. It is intended for users on macOS or Linux operating systems. Following these steps ensures an isolated installation without system-wide dependency conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-notifications/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-notifications
```

----------------------------------------

TITLE: Install Google Cloud Retail Python Client Library
DESCRIPTION: Instructions for installing the Google Cloud Retail Python client library using `venv` on different operating systems, ensuring an isolated environment for project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-retail/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-retail
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-retail
```

----------------------------------------

TITLE: Install Google Cloud Certificate Manager Python Client on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Certificate Manager client library using pip in a virtual environment on macOS or Linux systems. This ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-certificate-manager/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-certificate-manager
```

----------------------------------------

TITLE: Install Google Cloud OS Login Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the Google Cloud OS Login client library on macOS and Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-os-login
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python client library module (e.g., `google.cloud.library_v1`). It retrieves the module's logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG` for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-logging/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: Use Python's standard `logging` module to programmatically configure a specific Google Python client library's logger, like `google.cloud.library_v1`. This involves adding a `StreamHandler` and setting its level to `DEBUG` for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-modelarmor/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud NetApp Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-netapp` library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-netapp/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-netapp
```

----------------------------------------

TITLE: Install Google Cloud BeyondCorp AppGateways on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-beyondcorp-appgateways` library on Windows using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appgateways/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-beyondcorp-appgateways
```

----------------------------------------

TITLE: Install Google Cloud Resource Manager Python Library
DESCRIPTION: Instructions to install the `google-cloud-resource-manager` Python library in a virtual environment using `venv` and `pip` for both Mac/Linux and Windows operating systems. This ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-resource-manager/README.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-resource-manager
```

LANGUAGE: Shell
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-resource-manager
```

----------------------------------------

TITLE: Install Google Maps Address Validation Python Client Library
DESCRIPTION: Instructions for installing the `google-maps-addressvalidation` Python client library using `venv` for isolated environments on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-addressvalidation
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-addressvalidation
```

----------------------------------------

TITLE: Enable Default Handler for Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module, e.g., `google.cloud.library_v1`, enabling the default logging handler only for that particular Google client library. This provides granular environment-based logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-places/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler for the root 'google' logger, setting its level to DEBUG. This ensures that all logging events from Google-based modules are processed and outputted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-events-subscriptions/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically in Python
DESCRIPTION: This snippet illustrates how to set up logging handlers using Python's standard `logging` module. It provides examples for configuring a `StreamHandler` and setting the log level for all Google-based loggers or for a specific Google Cloud client library module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Access Context Manager Python Client
DESCRIPTION: Instructions for installing the Google Cloud Access Context Manager Python client library in a virtual environment. This process creates an isolated Python environment and installs the package using pip, supporting both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-context-manager/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-access-context-manager
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-access-context-manager
```

----------------------------------------

TITLE: Install Google Cloud Policy Simulator Library on Windows
DESCRIPTION: This snippet provides instructions for setting up a Python virtual environment and installing the `google-cloud-policysimulator` library on Windows. It helps manage project dependencies in an isolated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-policysimulator
```

----------------------------------------

TITLE: Install Google Cloud Oracle Database Client Library
DESCRIPTION: These snippets provide the console commands to set up a Python virtual environment and install the `google-cloud-oracledatabase` library. Separate commands are provided for Mac/Linux and Windows to ensure proper environment activation and package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-oracledatabase/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-oracledatabase
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-oracledatabase
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules
DESCRIPTION: Shows how to programmatically configure a logging handler for all Google-based loggers using Python's standard `logging` module. This example sets a `StreamHandler` and `DEBUG` level for the `google` logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG` to capture all logging events from Google-based modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-areainsights/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Rename 'type' Attributes to 'type_' in Google Cloud Data Catalog Python API
DESCRIPTION: This breaking change introduced in version 3.0.0 of the Google Cloud Data Catalog Python client library renames several 'type' attributes to 'type_' to avoid name collisions with Python's built-in `type` keyword. This affects attributes within `TagTemplateField`, `ColumnSchema`, and `Entry` classes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datacatalog/CHANGELOG.md#_snippet_64

LANGUAGE: APIDOC
CODE:
```
Renamed attributes in v3.0.0:
TagTemplateField:
  type -> type_

ColumnSchema:
  type -> type_

Entry:
  type -> type_
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python snippet shows how to programmatically configure logging for a specific Google client library, such as `google.cloud.library_v1`. It obtains the module-specific logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, allowing precise control over logging for individual components and reducing log noise.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Cloud Module
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `logging.StreamHandler` for a specific Google Cloud Python client library module (e.g., `google.cloud.library_v1`). It sets the logging level to `DEBUG`, allowing targeted logging configuration for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datapolicies/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the top-level 'google' logger, setting its level to `DEBUG`. This enables detailed logging for all Google-based loggers in your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Add support for Python 3.12
DESCRIPTION: Documents the addition of official support for Python 3.12, expanding the compatible Python environments for the library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/docs/CHANGELOG.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Supported Environments:
  - Python: 3.12
```

----------------------------------------

TITLE: Install Google Cloud Audit Log Python Library
DESCRIPTION: Instructions to set up a virtual environment and install the Google Cloud Audit Log Python client library on various operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-audit-log/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-audit-log
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-audit-log
```

----------------------------------------

TITLE: Install Google Shopping Merchant LFP on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-shopping-merchant-lfp` library on Windows. It ensures isolated project dependencies for your Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-lfp/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-lfp
```

----------------------------------------

TITLE: Install Google Cloud Billing Library on Windows
DESCRIPTION: Installs the Google Cloud Billing client library within a virtual environment on Windows systems. This method helps manage project dependencies without system conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-billing
```

----------------------------------------

TITLE: Install Google Cloud Filestore Library on Windows
DESCRIPTION: This snippet provides instructions for setting up a Python virtual environment and installing the `google-cloud-filestore` library on Windows. It utilizes `venv` for environment isolation and `pip` for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-filestore
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers using the standard `logging` module. It sets up a `StreamHandler` for the 'google' logger and sets its level to `DEBUG`, allowing for fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc-metastore/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers in Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-area120-tables/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: This Python example illustrates how to programmatically configure logging for all Google-based loggers. It sets up a StreamHandler for the 'google' logger and sets its level to DEBUG, providing fine-grained control over logging behavior within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-automl/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Feature: Add System Instructions
DESCRIPTION: Introduces the ability to provide system instructions, which can guide the behavior or context of the AI model. This allows for more precise control over model responses.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/CHANGELOG.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Model Configuration:
  system_instructions: str
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python module's logger (e.g., `google.cloud.library_v1`). It sets the logging level to `DEBUG`, allowing targeted debugging for a particular client library. By default, events are not propagated to the root logger unless `logging.getLogger("google").propagate = True` is explicitly set.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Web Security Scanner Python Client
DESCRIPTION: Provides commands to set up a Python virtual environment and install the Google Cloud Web Security Scanner client library on various operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-websecurityscanner
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-websecurityscanner
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets its level to `DEBUG`, providing detailed logging for all Google Cloud client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the base `google` logger. It sets the logging level to `DEBUG` and directs all Google-based log messages to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-logging/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Domains Python Client Library
DESCRIPTION: Commands to install the `google-cloud-domains` Python client library within a virtual environment using `venv`. This ensures isolated project dependencies and is shown for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-domains/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-domains
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-domains
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: Use Python's standard 'logging' module to programmatically set up a StreamHandler and DEBUG level for the root 'google' logger, affecting all Google-based client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Policy Simulator Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-policysimulator` library on macOS or Linux systems. It ensures project dependencies are isolated within the virtual environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-policysimulator
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module Using Python Code
DESCRIPTION: This Python example demonstrates how to programmatically configure a logging handler specifically for a particular Google Cloud client library module (e.g., 'google.cloud.library_v1'). It adds a StreamHandler and sets the logging level to DEBUG for that module's logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managedkafka/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Build Python Client Library
DESCRIPTION: Instructions to install the Google Cloud Build Python client library using `venv` to create isolated Python environments. This covers installation steps for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/docs/README.rst#_snippet_0

LANGUAGE: console (Mac/Linux)
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-build
```

LANGUAGE: console (Windows)
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-build
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level 'google' logger, ensuring all Google-based logging events are handled.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Python Module Programmatically
DESCRIPTION: This Python example illustrates how to programmatically set up a logging handler for a specific Google Cloud Python client library. It targets the logger for `google.cloud.library_v1`, adds a `StreamHandler`, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientgateways/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud DMS Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a virtual environment and install the `google-cloud-dms` library on Windows. It uses `venv` for environment isolation and `pip` for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dms/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dms
```

----------------------------------------

TITLE: Install Google Cloud API Gateway Client Library on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-api-gateway` library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-api-gateway
```

----------------------------------------

TITLE: Install Google Cloud Composer Client Library on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Composer Python client library on Mac/Linux systems using a virtual environment. This involves creating a venv, activating it, and then installing the package via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-orchestration-airflow
```

----------------------------------------

TITLE: Install Google Cloud Storage Batch Operations Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-storagebatchoperations` library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storagebatchoperations/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-storagebatchoperations
```

----------------------------------------

TITLE: Install Google Cloud App Hub Python Client on Windows
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-apphub` Python client library on Windows systems. It involves creating a virtual environment using `venv`, activating it, and then installing the package using `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apphub/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-apphub
```

----------------------------------------

TITLE: Install Google Cloud Vision AI Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-visionai` library on Mac or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-visionai
```

----------------------------------------

TITLE: Install Python Client for Service Directory on Windows
DESCRIPTION: This snippet provides commands to set up a virtual environment and install the `google-cloud-service-directory` library on Windows. It isolates project dependencies from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-service-directory
```

----------------------------------------

TITLE: Install Python Client for Service Directory on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a virtual environment and install the `google-cloud-service-directory` library on macOS or Linux systems. It ensures project dependencies are isolated from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-service-directory
```

----------------------------------------

TITLE: Enabling default handler for all Google-based loggers via environment variable
DESCRIPTION: This example shows how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures handling of logging events at DEBUG level or higher in a structured format.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-webrisk/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Valid and Invalid Method Call Patterns
DESCRIPTION: Illustrates correct and incorrect ways to call methods that accept either a `request` object or flattened keyword arguments. Mixing the `request` parameter with individual keyword arguments is explicitly forbidden and will result in an error.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/UPGRADING.md#_snippet_5

LANGUAGE: python
CODE:
```
response = client.get_trace(
    request={
        "project_id": project_id,
        "trace_id": trace_id
    }
)
```

LANGUAGE: python
CODE:
```
response = client.get_trace(
    project_id=project_id,
    trace_id=trace_id,
)
```

LANGUAGE: python
CODE:
```
response = client.get_trace(
    request={
        "project_id": project_id,
    },
    trace_id=trace_id,
)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically
DESCRIPTION: This snippet illustrates how to set up logging for Google Cloud Python libraries using Python's standard `logging` module. It shows how to obtain a logger for all Google-based modules or a specific client library, add a stream handler, and set the logging level to DEBUG, providing fine-grained control over logging behavior within your application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-commerce-consumer-procurement/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure logging handler for a specific Google module using Python code
DESCRIPTION: This Python example shows how to programmatically configure a StreamHandler and set the logging level to DEBUG for a specific Google Cloud client library's logger, such as 'google.cloud.library_v1'. This allows fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Modules in Python
DESCRIPTION: This Python example illustrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-commerce-consumer-procurement/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Loggers Programmatically
DESCRIPTION: This Python example demonstrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It sets up a `StreamHandler` to output logs to the console and sets the logging level to `DEBUG` for the 'google' logger, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries (Code-Based)
DESCRIPTION: This Python snippet illustrates configuring a logging handler for all Google-based loggers using the standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler`, and sets its level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-inventories/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google client library's logger, such as `google.cloud.library_v1`. This method allows for precise control over logging for individual modules within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Dataplex Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-dataplex` Python client library on Mac or Linux systems. It guides users through creating and activating a Python virtual environment using `venv`, followed by installing the library using `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dataplex
```

----------------------------------------

TITLE: Install Google Cloud KMS Client Library on Mac/Linux
DESCRIPTION: Instructions for setting up a Python virtual environment using 'venv' and installing the Google Cloud KMS client library on macOS and Linux systems. This method isolates project dependencies from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-kms
```

----------------------------------------

TITLE: Install Google Cloud Policy Troubleshooter IAM Python Client Library
DESCRIPTION: Instructions for installing the `google-cloud-policytroubleshooter-iam` library using `pip` within a virtual environment. This process isolates project dependencies and avoids system-wide permission issues.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-policytroubleshooter-iam
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-policytroubleshooter-iam
```

----------------------------------------

TITLE: Install Google Cloud Public CA Library on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-public-ca` client library on macOS and Linux systems. Using a virtual environment helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-public-ca
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules Programmatically (Python)
DESCRIPTION: Demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the base 'google' logger using Python's standard `logging` mechanism. This ensures all Google-based client library logs are captured and emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG` to capture all logging events from Google-based client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datalabeling/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Programmatically
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as 'google.cloud.library_v1'. It obtains the logger for the specific module, adds a StreamHandler, and sets its logging level to DEBUG.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-services/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Kubernetes Engine Python Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-container` library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-container
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Programmatically (Python)
DESCRIPTION: Shows how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud client library's logger (e.g., `google.cloud.library_v1`), allowing fine-grained control over module-specific logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contentwarehouse/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: Use Python's `logging` module to configure a stream handler and set the debug level for the 'google' logger, enabling custom logging for all Google-based libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG`. This provides fine-grained control over logging behavior directly within your application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-transfer/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Loggers Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically set up a `StreamHandler` and `DEBUG` level logging for the root `google` logger. This ensures that all Google-based client library logging events are captured and outputted via standard Python logging mechanisms.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-support/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: Use Python's standard `logging` module to programmatically configure a stream handler for all Google-based loggers. This example sets the `google` logger's level to `DEBUG` and adds a `StreamHandler` to output logs to the console, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Deploy Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-deploy` library on macOS or Linux systems. It ensures dependencies are isolated from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-deploy/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-deploy
```

----------------------------------------

TITLE: Install Google Cloud Channel Python Client on Mac/Linux
DESCRIPTION: This snippet provides the command-line steps to set up a Python virtual environment and install the `google-cloud-channel` library on macOS and Linux systems. It ensures isolated dependencies for your project, preventing conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-channel/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-channel
```

----------------------------------------

TITLE: Install Google Maps Solar Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-maps-solar` library on Mac/Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-solar
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based loggers using the standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` to capture detailed events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-analyticshub/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, providing fine-grained control over log output directly within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-registry/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets its level to `DEBUG`. By default, events from this logger are not propagated to the root logger unless `propagate = True` is explicitly set.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for all `google`-prefixed loggers. This ensures structured logging events are emitted to the console, offering fine-grained control over the logging setup.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memorystore/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Apps Card Python Library on Windows
DESCRIPTION: This snippet provides console commands to create a Python virtual environment, activate it, and install the `google-apps-card` library using pip on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-card/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-card
```

----------------------------------------

TITLE: Install Google Cloud Video Stitcher on Windows
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment and install the `google-cloud-video-stitcher` library on Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-stitcher/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-video-stitcher
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Modules
DESCRIPTION: Use Python's standard `logging` mechanism to configure a stream handler and set the debug level for the base `google` logger. This enables detailed logging for all Google-based components, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Libraries
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based Python client libraries. It obtains the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`, allowing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets its level to `DEBUG`, providing fine-grained control over logging output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based loggers are handled and displayed, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms-inventory/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Generative Language API Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-ai-generativelanguage` client library on Mac or Linux systems. It ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-ai-generativelanguage
```

----------------------------------------

TITLE: Install Google Geo Type Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the `google-geo-type` Python client library on Mac/Linux systems using a virtual environment created with `venv`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-geo-type/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-geo-type
```

----------------------------------------

TITLE: Install BigQuery Data Policy Client Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-bigquery-datapolicies` library on macOS and Linux systems. It ensures project dependencies are isolated, preventing conflicts with other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datapolicies/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bigquery-datapolicies
```

----------------------------------------

TITLE: Install Google Shopping Merchant Products Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-shopping-merchant-products` library on Mac/Linux systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-products/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-products
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Handler Programmatically
DESCRIPTION: Illustrates how to set up a logging handler for Google Cloud Python client libraries using Python's standard `logging` module. This approach allows for fine-grained control, enabling configuration for either all 'google'-scoped loggers or specific modules like 'google.cloud.library_v1', and setting the logging level and handler.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycentermanagement/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Edge Container Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-edgecontainer` library on Mac/Linux systems. It ensures isolated dependencies for your project and avoids conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgecontainer/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-edgecontainer
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically with Python
DESCRIPTION: This snippet illustrates how to set up logging for Google Cloud Python libraries directly within your Python code using the standard `logging` module. It shows how to get a logger for all Google modules or a specific one, add a `StreamHandler`, and set the logging level to `DEBUG`. This method offers more granular control over handlers, formatters, and logging levels compared to environment-based configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Advisory Notifications Python Client
DESCRIPTION: Instructions to install the `google-cloud-advisorynotifications` library within a Python virtual environment. This approach ensures isolated project dependencies, preventing conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/docs/README.rst#_snippet_0

LANGUAGE: console (Mac/Linux)
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-advisorynotifications
```

LANGUAGE: console (Windows)
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-advisorynotifications
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Programmatically in Python
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler and configures the 'google' logger to capture DEBUG level messages, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-texttospeech/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers using Python's standard 'logging' module. It sets up a StreamHandler for the 'google' logger, directing logs to the console and setting the logging level to DEBUG.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-services/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure StreamHandler for All Google Python Loggers Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger, setting its level to `DEBUG` to capture all logging events from Google-based modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-discoveryengine/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default structured logging handler for a particular Google Cloud Python client library module (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope, such as `google.cloud.library_v1`. This allows targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-events-subscriptions/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging via Environment Variable (Specific Module)
DESCRIPTION: This snippet shows how to enable default logging for a specific Google Cloud Python client library, such as `google.cloud.library_v1`, by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This targets logging to a particular module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycenter/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries
DESCRIPTION: Provides methods to enable and configure logging for all Google-based loggers within the Python SDK, either via environment variables or directly in Python code. This allows developers to capture logging messages in a structured format across all Google Cloud client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-approval/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Cloud Controls Partner API Client Library
DESCRIPTION: Instructions for installing the `google-cloud-cloudcontrolspartner` library in a virtual environment. This method ensures isolated dependencies for your project, preventing conflicts with other Python projects or system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-cloudcontrolspartner/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-cloudcontrolspartner
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-cloudcontrolspartner
```

----------------------------------------

TITLE: Install Merchant ProductStudio API Client Library
DESCRIPTION: Provides commands to install the Google Merchant ProductStudio API client library within a virtual environment on different operating systems. This ensures isolated project dependencies and avoids conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-productstudio/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-productstudio
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-productstudio
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python snippet illustrates how to configure a `StreamHandler` for all Google-based loggers using the standard `logging` module. It retrieves the root "google" logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG`, providing programmatic control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific Google Cloud client library logger, such as `google.cloud.library_v1`, and set its level to `DEBUG`. This allows for targeted logging configuration for individual client libraries within an application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python module's logger, such as `google.cloud.library_v1`, and set its level to `DEBUG`. This allows developers to apply custom logging configurations to individual client libraries, overriding environment-based settings if applied first.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (Specific Module)
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for a specific Google Cloud Python client library module, like 'google.cloud.library_v1'. It obtains the module's logger, attaches a StreamHandler, and sets its level to DEBUG for detailed logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memcache/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Edge Network Python Library
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-edgenetwork` library on various operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgenetwork/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-edgenetwork
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-edgenetwork
```

----------------------------------------

TITLE: Install Google Cloud Security Command Center Client Library on Mac/Linux
DESCRIPTION: Installs the Google Cloud Security Command Center Python client library in a virtual environment on Mac or Linux systems. This process isolates project dependencies and avoids system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycenter/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-securitycenter
```

----------------------------------------

TITLE: Install Google Cloud Build Python Client on Windows
DESCRIPTION: This snippet provides the necessary console commands to create a Python virtual environment and install the `google-cloud-build` library on Windows operating systems. This method ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-build
```

----------------------------------------

TITLE: Install Google Cloud Redis Client Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-redis` library on Windows systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-redis
```

----------------------------------------

TITLE: Install Google Cloud Artifact Registry Client Library on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Artifact Registry Python client library on macOS or Linux using a virtual environment. This method isolates project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-artifact-registry/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-artifact-registry
```

----------------------------------------

TITLE: Google Cloud Python Client Thread and Multiprocessing Safety
DESCRIPTION: Provides essential guidelines for safely using the Google Cloud Python client in concurrent environments, detailing thread safety due to gRPC and best practices for multiprocessing scenarios.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-config/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Google Cloud Python Client Concurrency Guidelines:
  Thread Safety:
    - Client instances are safe to share across threads.
    - This safety is attributed to the underlying `grpc` library.
  Multiprocessing Best Practices:
    - In multiprocessing scenarios, create client instances *after* the invocation of `os.fork`.
    - This applies specifically when using `multiprocessing.pool.Pool` or `multiprocessing.Process`.
```

----------------------------------------

TITLE: Install Google Cloud Dataform Python Client on Mac/Linux
DESCRIPTION: Instructions for installing the Google Cloud Dataform Python client library on macOS and Linux systems. It recommends using a virtual environment (`venv`) to isolate project dependencies and avoid conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dataform
```

----------------------------------------

TITLE: Install Google Chat API Client Library on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the Google Chat API client library on Windows systems using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-chat
```

----------------------------------------

TITLE: Install Google Cloud Tasks Python Client Library
DESCRIPTION: Instructions for installing the `google-cloud-tasks` Python client library using `pip` within a virtual environment. This covers steps for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-tasks
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-tasks
```

----------------------------------------

TITLE: Install Google Cloud Network Security Python Client Library
DESCRIPTION: Instructions to install the `google-cloud-network-security` Python client library using `pip` within a `virtualenv` environment. This method creates an isolated Python environment, preventing dependency conflicts with system-wide packages. Separate commands are provided for Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-security/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-network-security
```

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-network-security
```

----------------------------------------

TITLE: Install Google Cloud Private CA Client on Windows
DESCRIPTION: This snippet provides instructions for setting up a Python virtual environment and installing the `google-cloud-private-ca` library on Windows. It helps manage project dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-ca/docs/README.rst#_snippet_1

LANGUAGE: cmd
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-private-ca
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging via Environment Variable (All Modules)
DESCRIPTION: This snippet demonstrates how to enable default structured logging for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures logging events at `DEBUG` level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing-budgets/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Storage Insights Python Client Library
DESCRIPTION: Provides instructions for installing the Google Cloud Storage Insights Python client library using a virtual environment on different operating systems (Mac/Linux and Windows). This ensures isolated dependencies and avoids system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storageinsights/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-storageinsights
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-storageinsights
```

----------------------------------------

TITLE: Install Google Cloud Access Approval Python Client Library
DESCRIPTION: Installs the Google Cloud Access Approval Python client library in a virtual environment. This process isolates project dependencies and is applicable for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-approval/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-access-approval
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-access-approval
```

----------------------------------------

TITLE: Install Google Cloud Eventarc Publishing on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-eventarc-publishing` library on macOS or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc-publishing/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-eventarc-publishing
```

----------------------------------------

TITLE: Install Google Shopping Merchant Order Tracking Python Library
DESCRIPTION: Instructions for installing the `google-shopping-merchant-ordertracking` Python client library within a virtual environment. This method ensures isolated project dependencies and avoids conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-ordertracking/docs/README.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-ordertracking
```

LANGUAGE: Shell
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-ordertracking
```

----------------------------------------

TITLE: Install Google Cloud Memorystore for Redis Client on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-redis-cluster` library on Windows. It ensures project dependencies are isolated and avoids conflicts with system Python.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis-cluster/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-redis-cluster
```

----------------------------------------

TITLE: Configure Logging Programmatically in Python
DESCRIPTION: Examples showing how to configure logging handlers and levels for Google Cloud Python libraries directly within Python code using the standard `logging` module. This provides more granular control over logging behavior compared to environment-based configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-privilegedaccessmanager/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google Cloud Python library are captured and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-support/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable the default structured logging handler for all Google Cloud Python client libraries. This captures logging events at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries (Code)
DESCRIPTION: This Python snippet illustrates how to configure a StreamHandler and set the logging level to DEBUG for all 'google'-prefixed loggers using Python's standard 'logging' mechanism. This provides more control than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-security/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Libraries (Code)
DESCRIPTION: This Python code snippet shows how to programmatically configure a StreamHandler for the base 'google' logger, setting its level to DEBUG. This ensures all logging events from Google-based modules are captured and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Logger with StreamHandler in Python
DESCRIPTION: Demonstrates how to programmatically configure the top-level `google` logger in Python. It adds a `StreamHandler` to output log messages to the console and sets the logging level to `DEBUG` for comprehensive output from all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Shopping Merchant Accounts Python Client Library
DESCRIPTION: Instructions for installing the `google-shopping-merchant-accounts` Python client library using `venv` for isolated environments on different operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-accounts
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-accounts
```

----------------------------------------

TITLE: Install Python Client Library for BigQuery Analytics Hub on Windows
DESCRIPTION: This snippet demonstrates how to install the Google Cloud BigQuery Analytics Hub Python client library on Windows using a virtual environment. It creates an isolated Python environment to manage project dependencies, preventing conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-data-exchange/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-bigquery-data-exchange
```

----------------------------------------

TITLE: Install Google Cloud Backup and DR Python Client on Windows
DESCRIPTION: This snippet provides commands to create a virtual environment and install the `google-cloud-backupdr` Python client library on Windows systems. It uses `venv` for isolated environments and `pip` for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-backupdr
```

----------------------------------------

TITLE: Install Google Shopping Merchant Products Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-shopping-merchant-products` library on Windows systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-products/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-products
```

----------------------------------------

TITLE: Install Google Shopping Merchant LFP on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-shopping-merchant-lfp` library on macOS or Linux. It ensures isolated project dependencies for your Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-lfp/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-lfp
```

----------------------------------------

TITLE: Configure Python Logging Handler for Specific Google Module Programmatically
DESCRIPTION: This Python code demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler`, and sets its logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module Programmatically
DESCRIPTION: This Python code snippet illustrates how to configure a `StreamHandler` and `DEBUG` level for a specific Google Cloud Python client library's logger, such as `google.cloud.library_v1`. This provides fine-grained control over logging behavior for individual modules within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-support/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Programmatically
DESCRIPTION: This Python example illustrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library, such as `google.cloud.library_v1`. It involves getting the specific module's logger, setting its level to `logging.DEBUG`, and attaching a `StreamHandler` for fine-grained logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Module
DESCRIPTION: This Python code snippet shows how to configure a logging handler for a specific Google module, such as `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG` for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-connect/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically configure logging for a specific Google Cloud Python client library, such as `library_v1`. It obtains the `google.cloud.library_v1` logger, adds a `StreamHandler`, and sets its level to `logging.DEBUG` for detailed module-specific logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Feature: NFS and GCS Volume Mounting for Cloud Run Jobs/Services
DESCRIPTION: Cloud Run Jobs and Services now support mounting NFS and Google Cloud Storage (GCS) volumes, enabling persistent storage access.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/CHANGELOG.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Google Cloud Run v2.Job/Service:
  New volume types: NFS, GCS
    Purpose: Mount external file systems for persistent storage.
```

----------------------------------------

TITLE: Install Anthos Multicloud Python Client on Mac/Linux
DESCRIPTION: Instructions for setting up a virtual environment and installing the `google-cloud-gke-multicloud` library on Mac or Linux systems. This ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-gke-multicloud
```

----------------------------------------

TITLE: Install Google Cloud VMware Engine Client Library on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the Google Cloud VMware Engine client library on macOS or Linux systems. It ensures dependencies are isolated from other projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vmwareengine/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-vmwareengine
```

----------------------------------------

TITLE: Install Google Cloud BeyondCorp AppConnections on Mac/Linux
DESCRIPTION: This snippet provides the commands to set up a Python virtual environment and install the `google-cloud-beyondcorp-appconnections` library on macOS or Linux systems. Using a virtual environment helps isolate project dependencies from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-beyondcorp-appconnections
```

----------------------------------------

TITLE: Install Google Cloud Video Stitcher Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-cloud-video-stitcher` library on Mac/Linux systems. It isolates project dependencies from system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-stitcher/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-video-stitcher
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Programmatically (Python)
DESCRIPTION: Demonstrates how to use Python's `logging` module to configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger, enabling detailed logging for all Google-based components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contentwarehouse/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Loggers
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all 'google'-prefixed loggers. It obtains the base 'google' logger, adds a StreamHandler to output logs to the console, and sets the logging level to DEBUG, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`. This provides programmatic control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-fusion/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: Demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard 'logging' mechanism. This provides fine-grained control over the 'google' logging scope.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-biglake/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: Illustrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard `logging` module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-quota/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger, ensuring all Google Cloud Python library logs are processed and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-enterpriseknowledgegraph/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Using Python Code
DESCRIPTION: This Python example demonstrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler to emit DEBUG level messages from the 'google' namespace, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-control/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Shell Python Client Library
DESCRIPTION: This snippet provides commands to install the `google-cloud-shell` Python client library. It demonstrates setting up a virtual environment using `venv` and then installing the package with `pip` for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-shell/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-shell
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-shell
```

----------------------------------------

TITLE: Install Google Cloud Speech Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Speech Python client library on Mac or Linux systems. It guides through creating and activating a Python virtual environment, then installing the library using pip to manage project dependencies in isolation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-speech
```

----------------------------------------

TITLE: Install Google Cloud Bare Metal Solution Python Client on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment and install the `google-cloud-bare-metal-solution` client library on Mac or Linux operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bare-metal-solution/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bare-metal-solution
```

----------------------------------------

TITLE: Install Google Cloud Apigee Connect on Windows
DESCRIPTION: This snippet provides the commands to set up a Python virtual environment and install the `google-cloud-apigee-connect` library on Windows. It ensures isolated project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-connect/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-apigee-connect
```

----------------------------------------

TITLE: Install Google Cloud Apigee Registry Library on Windows
DESCRIPTION: Instructions for installing the Google Cloud Apigee Registry Python client library on Windows systems. It utilizes a virtual environment (venv) for dependency isolation and pip for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-registry/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-apigee-registry
```

----------------------------------------

TITLE: Install Google Cloud Policy Simulator Python Client
DESCRIPTION: This snippet provides instructions for installing the `google-cloud-policysimulator` Python client library. It demonstrates how to set up a virtual environment using `venv` and install the package using `pip` for both Mac/Linux and Windows operating systems. A virtual environment isolates project dependencies, preventing conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-policysimulator
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-policysimulator
```

----------------------------------------

TITLE: Install Google Merchant Products Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-shopping-merchant-products` library using `pip` on Mac or Linux operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-products/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-products
```

----------------------------------------

TITLE: Install Google Cloud NetApp Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-netapp` library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-netapp/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-netapp
```

----------------------------------------

TITLE: Install Google Cloud Certificate Manager Python Client on Windows
DESCRIPTION: Instructions to install the Google Cloud Certificate Manager client library using pip in a virtual environment on Windows systems. This method helps manage project dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-certificate-manager/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-certificate-manager
```

----------------------------------------

TITLE: Install google-cloud-managed-identities on Windows
DESCRIPTION: Instructions for installing the `google-cloud-managed-identities` library on Windows systems using a Python virtual environment. This allows installation without system permissions and avoids dependency clashes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managed-identities/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-managed-identities
```

----------------------------------------

TITLE: Install Google Cloud Transcoder Client Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-video-transcoder` library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-transcoder/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-video-transcoder
```

----------------------------------------

TITLE: Install Google Cloud AlloyDB Connectors on Mac/Linux
DESCRIPTION: This snippet provides the console commands to install the Google Cloud AlloyDB Connectors Python library on Mac or Linux systems using a virtual environment. It involves creating a venv, activating it, and then installing the package via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb-connectors/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-alloydb-connectors
```

----------------------------------------

TITLE: Configure logging for all Google Cloud Python loggers using Python code
DESCRIPTION: This Python code snippet illustrates how to programmatically configure logging for all Google-based loggers. It obtains the base "google" logger, adds a StreamHandler to output logs to the console, and sets the logging level to DEBUG to capture detailed messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-live-stream/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Loggers Programmatically
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a logging handler for all Google-based Python client library loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-logging/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure logging handler for all Google modules using Python code
DESCRIPTION: This Python example demonstrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for the base 'google' logger. This enables detailed logging for all Google-based modules, providing more control than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Loggers with Python Logging
DESCRIPTION: This Python example illustrates how to programmatically configure a `StreamHandler` and set the `DEBUG` level for all loggers under the 'google' namespace. This provides fine-grained control over logging behavior using the standard `logging` module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: Set up a logging handler for all Google-based loggers directly in Python code. This example retrieves the 'google' logger, adds a `StreamHandler` to output messages, and sets its level to `DEBUG`, providing programmatic control over logging for all Google libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-migration/README.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Libraries
DESCRIPTION: This Python snippet illustrates how to configure logging for all Google-based Python client libraries using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` to capture detailed events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Loggers Using Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all loggers under the 'google' namespace. It obtains the base logger, adds a StreamHandler to output messages, and sets the logging level to DEBUG, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-live-stream/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It retrieves the `google` logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`, providing fine-grained control over logging behavior within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dms/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Video Intelligence Python Client Library
DESCRIPTION: Instructions to install the Google Cloud Video Intelligence client library in a virtual environment using `venv` and `pip` for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-videointelligence/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-videointelligence
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-videointelligence
```

----------------------------------------

TITLE: Install Google Cloud Dialogflow Python Library on Windows
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-dialogflow` Python client library on Windows using a virtual environment. It creates an isolated environment, activates it, and then installs the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dialogflow
```

----------------------------------------

TITLE: Install Google Cloud AlloyDB Python Client Library
DESCRIPTION: Provides instructions for installing the Google Cloud AlloyDB Python client library using a virtual environment (venv) and pip, covering both Mac/Linux and Windows operating systems. This ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-alloydb
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-alloydb
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a StreamHandler for the root 'google' logger using Python's standard 'logging' mechanism. It sets the logger's level to DEBUG, ensuring all logging events from Google-based modules are captured and outputted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Libraries (Python)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a StreamHandler for the root 'google' logger, setting its level to DEBUG to capture all Google-based logging events. This method offers fine-grained control over logging behavior within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-stitcher/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger. This ensures all log events originating from any Google-based module are processed and outputted to the console, offering more control than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Client Libraries
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers programmatically. It obtains the 'google' logger, adds a StreamHandler to output messages, and sets the logging level to DEBUG to capture all events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-transfer/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all loggers under the `google` namespace. It retrieves the `google` logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, providing fine-grained control over logging behavior within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managedkafka/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: Use Python's standard `logging` mechanism to configure a `StreamHandler` for the base `google` logger, setting its level to `DEBUG` to capture all logging events from Google-based libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Scope Programmatically in Python
DESCRIPTION: Use Python's standard 'logging' module to configure handlers and levels for Google Cloud Python client libraries. This allows for fine-grained control over logging for either all Google-based loggers or a specific module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/docs/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python example illustrates how to programmatically configure logging for all Google-based loggers. It uses Python's standard `logging` mechanism to get the 'google' logger, add a `StreamHandler` to output logs to the console, and set the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parametermanager/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically with Python
DESCRIPTION: This snippet illustrates how to configure logging for Google Cloud Python libraries using Python's standard `logging` module. It shows how to obtain a logger for either all Google-based modules or a specific client library, add a stream handler, and set the logging level to DEBUG for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-notebooks/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python)
DESCRIPTION: Use Python's standard `logging` mechanism to configure a `StreamHandler` and set the logging level (e.g., `DEBUG`) for the base 'google' logger, which affects all Google-based loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-routing/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet shows how to enable default logging for all Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google'. This configures structured logging for `DEBUG` level events and higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based Python loggers. This provides a quick way to activate logging across the entire Google Cloud Python SDK without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google-Based Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-admin/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Video Intelligence Python Client Library
DESCRIPTION: Instructions for installing the Google Cloud Video Intelligence client library using `venv` for isolated Python environments on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-videointelligence/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-videointelligence
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-videointelligence
```

----------------------------------------

TITLE: Install Google Cloud Developer Connect Python Client Library
DESCRIPTION: Commands to install the `google-cloud-developerconnect` Python client library using a virtual environment on various operating systems. This ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-developerconnect/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-developerconnect
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-developerconnect
```

----------------------------------------

TITLE: Install Google Maps Solar Python Client on Windows
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-maps-solar` library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-solar
```

----------------------------------------

TITLE: Install Google Cloud Common Python Library
DESCRIPTION: Instructions to install the `google-cloud-common` Python library using `venv` for isolated environments. This ensures dependencies are managed without clashing with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-common
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-common
```

----------------------------------------

TITLE: Install Google Generative Language API Python Client
DESCRIPTION: Instructions for installing the Google Generative Language API Python client library using `pip` within a virtual environment on different operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-ai-generativelanguage
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-ai-generativelanguage
```

----------------------------------------

TITLE: gRPC Client Instance Thread Safety and Multiprocessing Guidelines
DESCRIPTION: Provides guidance on safely sharing gRPC client instances across threads and processes in Python. It highlights that gRPC clients are thread-safe and can be shared, but in multiprocessing scenarios, new instances should be created after `os.fork` to avoid issues.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-binary-authorization/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
gRPC Client Instance Management:
  Thread Safety:
    - gRPC client instances are safe to share across threads.
  Multiprocessing Scenarios:
    - Best practice: Create client instances *after* the invocation of `os.fork`.
    - Relevant modules/classes: `multiprocessing.pool.Pool`, `multiprocessing.Process`.
```

----------------------------------------

TITLE: Install Google Cloud Parallelstore on Mac/Linux
DESCRIPTION: Installs the Google Cloud Parallelstore Python client library in a virtual environment on Mac or Linux systems. This creates an isolated Python environment to manage project dependencies, preventing conflicts with system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parallelstore/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-parallelstore
```

----------------------------------------

TITLE: Install Google Cloud Data QnA Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Data QnA Python client library on Mac or Linux systems. It guides through creating and activating a virtual environment, then installing the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-data-qna
```

----------------------------------------

TITLE: Install Google Cloud Transcoder Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-video-transcoder` client library on Mac or Linux systems. It ensures isolated project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-transcoder/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-video-transcoder
```

----------------------------------------

TITLE: Install Dataproc Metastore Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-dataproc-metastore` library on macOS and Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc-metastore/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dataproc-metastore
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This command enables the default logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-geo-type/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Logging for All Google Modules via Environment Variable
DESCRIPTION: Configure the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable default logging for all Google-based loggers in Python applications. This sets up basic structured logging without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-connect-gateway/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in the Python SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable default structured logging for all Google-based Python loggers without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Workspace Events API Python Client Library
DESCRIPTION: Instructions for installing the Google Workspace Events API Python client library using `pip` within a virtual environment on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-events-subscriptions/README.rst#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-apps-events-subscriptions
```

LANGUAGE: cmd
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-events-subscriptions
```

----------------------------------------

TITLE: Install Google Cloud OS Config Python Client Library
DESCRIPTION: These snippets provide commands to set up a Python virtual environment and install the `google-cloud-os-config` library, tailored for both Mac/Linux and Windows operating systems. This approach ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-config/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-os-config
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-os-config
```

----------------------------------------

TITLE: Install Google Cloud Memorystore Python Client Library
DESCRIPTION: Instructions for installing the Google Cloud Memorystore Python client library in an isolated virtual environment using `venv` and `pip`. This method prevents dependency conflicts with other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memorystore/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-memorystore
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-memorystore
```

----------------------------------------

TITLE: Configure Logging Handler for All Google-Based Loggers in Python
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a stream handler and set the logging level to DEBUG for all loggers within the 'google' namespace. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-transcoder/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Cloud Libraries
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger, affecting all Google-based loggers. It uses Python's standard `logging` module to provide fine-grained control over log output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers. It obtains the `google` logger, adds a `StreamHandler` to output messages, and sets its level to `DEBUG`, ensuring all events from Google Cloud libraries are captured and handled.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dms/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Merchant API Python Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to install the Google Merchant API Python client library on Mac/Linux systems. It demonstrates how to create and activate a virtual environment using `venv`, followed by installing the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-lfp/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-lfp
```

----------------------------------------

TITLE: Install Google Cloud Network Connectivity Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-network-connectivity` library on Mac or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-network-connectivity
```

----------------------------------------

TITLE: Install googleapis-common-protos on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the `googleapis-common-protos` Python library on Mac or Linux. It first creates a virtual environment using `venv` to isolate dependencies, then activates it, and finally installs the package using `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install googleapis-common-protos
```

----------------------------------------

TITLE: Install Google Cloud Advisory Notifications Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-advisorynotifications` library on Mac or Linux systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-advisorynotifications
```

----------------------------------------

TITLE: Install Google Cloud Workstations Python Client
DESCRIPTION: Installs the Google Cloud Workstations Python client library using pip within a virtual environment. This process isolates project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-workstations
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-workstations
```

----------------------------------------

TITLE: Install Google Cloud Resource Manager on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-resource-manager` library on Windows systems. This method helps manage project dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-resource-manager/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-resource-manager
```

----------------------------------------

TITLE: Install Google Apps Script Type Protos Python Library on Windows
DESCRIPTION: This snippet demonstrates how to install the Google Apps Script Type Protos Python client library on Windows systems using a virtual environment (`venv`). It creates an isolated Python environment, activates it, and then installs the library using pip, preventing conflicts with system dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-script-type
```

----------------------------------------

TITLE: Install Google Analytics Data Python Library
DESCRIPTION: These snippets provide instructions for setting up a Python virtual environment and installing the `google-analytics-data` library using `venv` and `pip` on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-data/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-analytics-data
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-analytics-data
```

----------------------------------------

TITLE: Install Google Cloud Datastream Python Client Library
DESCRIPTION: These snippets provide instructions for installing the `google-cloud-datastream` Python client library using `pip` within a virtual environment, for both Mac/Linux and Windows operating systems. Using a virtual environment ensures isolated dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datastream/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-datastream
```

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-datastream
```

----------------------------------------

TITLE: Install Google Cloud Storage Transfer Library on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Storage Transfer client library on macOS and Linux systems using a Python virtual environment. This method ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-transfer/README.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-storage-transfer
```

----------------------------------------

TITLE: Install Google Cloud Language Library on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment and install the `google-cloud-language` library on Mac or Linux operating systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-language/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-language
```

----------------------------------------

TITLE: Install Google Area 120 Tables Python Client
DESCRIPTION: These commands demonstrate how to install the Google Area 120 Tables Python client library in a virtual environment using `venv` and `pip` for both Mac/Linux and Windows operating systems. This ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-area120-tables/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-area120-tables
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-area120-tables
```

----------------------------------------

TITLE: Install Google Cloud Trace Python Client Library
DESCRIPTION: Instructions for installing the `google-cloud-trace` Python client library using `pip` within a virtual environment. This method ensures isolated dependencies and avoids potential conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/docs/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-trace
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-trace
```

----------------------------------------

TITLE: Install Google Cloud Access Context Manager Python Client
DESCRIPTION: Instructions for installing the `google-cloud-access-context-manager` Python client library using `pip` within a virtual environment. This process isolates project dependencies and avoids system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-context-manager/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-access-context-manager
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-access-context-manager
```

----------------------------------------

TITLE: Install Google Cloud AlloyDB Connectors on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-alloydb-connectors` library on Mac and Linux operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb-connectors/docs/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-alloydb-connectors
```

----------------------------------------

TITLE: Install Google Cloud Compute Python Client
DESCRIPTION: Instructions to install the google-cloud-compute library in a virtual environment using pip, for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute/README.rst#_snippet_0

LANGUAGE: console (Mac/Linux)
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-compute
```

LANGUAGE: console (Windows)
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-compute
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all loggers within the `google` namespace. It retrieves the base 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` to capture detailed events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-analyticshub/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`. This provides fine-grained control over logging behavior within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python example demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library (e.g., `library_v1`) using Python's standard `logging` mechanism. It targets the specific module's logger for granular control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appgateways/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python code snippet shows how to configure a stream handler and set the logging level to DEBUG for a specific Google module's logger, such as `google.cloud.library_v1`. This allows for fine-grained, code-based control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Artifact Registry on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-artifact-registry` library on Windows systems using console commands.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-artifact-registry/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-artifact-registry
```

----------------------------------------

TITLE: Install Google Cloud KMS Inventory Library on Windows
DESCRIPTION: Instructions to install the Google Cloud KMS Inventory Python client library in a virtual environment on Windows systems using pip. This approach helps manage project-specific dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms-inventory/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-kms-inventory
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Using Python Code
DESCRIPTION: This Python snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library's logger (e.g., 'google.cloud.library_v1'), setting its level to `DEBUG`. This allows fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-enterpriseknowledgegraph/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Certificate Manager Python Library on Mac/Linux
DESCRIPTION: Instructions for installing the `google-cloud-certificate-manager` Python client library on Mac/Linux systems. This process uses `venv` to create an isolated Python environment, preventing dependency conflicts with other projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-certificate-manager/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-certificate-manager
```

----------------------------------------

TITLE: Install Google Cloud Secret Manager on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment using `venv` and install the `google-cloud-secret-manager` library on Mac or Linux systems. It ensures isolated project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-secret-manager
```

----------------------------------------

TITLE: Install Google Cloud Controls Partner API Client Library on Windows
DESCRIPTION: Installs the Google Cloud Controls Partner API client library in a virtual environment on Windows. This process creates an isolated Python environment, activates it, and then installs the library using pip, preventing conflicts with system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-cloudcontrolspartner/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-cloudcontrolspartner
```

----------------------------------------

TITLE: Install Google Cloud OS Login Client Library
DESCRIPTION: Instructions for installing the Google Cloud OS Login client library using pip within a Python virtual environment on various operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-os-login
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-os-login
```

----------------------------------------

TITLE: Install Google Cloud Network Services Python Client on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-network-services` library on Windows systems using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-services/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-network-services
```

----------------------------------------

TITLE: Install Google Meet API Python Client on Windows
DESCRIPTION: Instructions to install the Google Meet API Python client library on Windows using `venv` for an isolated Python environment. This method avoids system-wide installation conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-meet/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-apps-meet
```

----------------------------------------

TITLE: Install Google Cloud Public CA Library on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-public-ca` client library on Windows. Using a virtual environment helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-public-ca
```

----------------------------------------

TITLE: Install Google Cloud App Hub Python Client on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-apphub` library on Windows systems. It ensures that the library's dependencies are isolated from other Python projects on your machine.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apphub/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-apphub
```

----------------------------------------

TITLE: Install Google Cloud Org Policy Library on Windows
DESCRIPTION: This snippet provides instructions for creating a Python virtual environment and installing the `google-cloud-org-policy` library on Windows. It isolates project dependencies to prevent conflicts with other Python projects or system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-org-policy/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-org-policy
```

----------------------------------------

TITLE: Install Google Cloud Network Management Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-network-management` library on macOS or Linux systems. It ensures isolated dependencies for your project by creating a dedicated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-network-management
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically
DESCRIPTION: Illustrates how to set up logging handlers for Google Cloud Python client libraries using Python's standard `logging` module. This approach provides fine-grained control, allowing configuration for all Google-based loggers or for a specific client library module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grpc-google-iam-v1/docs/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Python Client Library
DESCRIPTION: Instructions to install the `google-maps-fleetengine` library using a Python virtual environment on different operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-fleetengine
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-fleetengine
```

----------------------------------------

TITLE: Install Google Cloud Recommendations AI Python Client
DESCRIPTION: Instructions for installing the Google Cloud Recommendations AI client library using `pip` within a Python virtual environment. This process isolates project dependencies and avoids system-wide conflicts, ensuring a clean installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommendations-ai/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-recommendations-ai
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-recommendations-ai
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: This example demonstrates how to enable default logging for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures the library to emit structured log messages at `DEBUG` level or higher without requiring code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Global Google Cloud Python Logging via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures the logging mechanism to capture messages from all Google Cloud Python modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-discoveryengine/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger, setting its level to `DEBUG` to capture all Google-based logging events. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-reservation/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python example demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger, allowing fine-grained control over logging for all Google-related modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-connect-gateway/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python Code
DESCRIPTION: This Python example demonstrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-cloudcontrolspartner/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all loggers within the `google` namespace in Google Cloud Python client libraries. This is a simple way to activate basic logging across the entire Google SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: Configures the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to enable default logging handlers for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb-connectors/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically set up a logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`. It obtains the logger for the specified module, attaches a `StreamHandler` for console output, and sets its logging level to `DEBUG` for comprehensive debugging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-meet/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Handler for All Google Cloud Python Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures all logging events from Google libraries (at DEBUG level or higher) are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storageinsights/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Library Logging via Environment Variable for All Google Modules
DESCRIPTION: Configure default structured logging for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables `DEBUG` level events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-essential-contacts/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This snippet shows how to enable the default logging handler for all Google-based Python modules by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures the library to capture and display log messages from all Google Cloud Python components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-ordertracking/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers (Environment)
DESCRIPTION: Demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-conversions/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers using Python's standard `logging` mechanism. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture detailed messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securesourcemanager/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Programmatically
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It sets up a `StreamHandler` for the 'google' logger and sets its level to `DEBUG`, providing fine-grained control over logging output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommender/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Shopping CSS Python Library on Mac/Linux
DESCRIPTION: Provides steps to set up a virtual environment using `venv` and install the `google-shopping-css` library on macOS and Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-css
```

----------------------------------------

TITLE: Install Google Cloud Dialogflow Library on Mac/Linux
DESCRIPTION: Instructions for installing the `google-cloud-dialogflow` library in a virtual environment on Mac/Linux. This ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dialogflow
```

----------------------------------------

TITLE: Install Google Cloud GKE Backup Client on Mac/Linux
DESCRIPTION: This snippet provides the necessary console commands to set up a Python virtual environment and install the `google-cloud-gke-backup` library on macOS and Linux systems. Using a virtual environment helps isolate project dependencies from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-backup/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-gke-backup
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google module's logger, such as `google.cloud.library_v1`. It sets the logging level to `DEBUG`, allowing detailed log events from that particular module to be captured and outputted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-deploy/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: gRPC Client Thread Safety and Multiprocessing Best Practices
DESCRIPTION: This guideline explains that gRPC client instances are safe to share across threads. For multiprocessing scenarios, it advises creating new client instances *after* the `os.fork` call, typically when using `multiprocessing.pool.Pool` or `multiprocessing.Process`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
gRPC Client Thread Safety:
  - Instances are safe to share across threads.

Multiprocessing Best Practice:
  - Create client instances *after* the invocation of `os.fork`.
  - This applies when using `multiprocessing.pool.Pool` or `multiprocessing.Process`.
```

----------------------------------------

TITLE: Google Cloud Long-running Operations API Pattern
DESCRIPTION: Details the core `Operation` message and the standard three-step pattern for implementing and consuming long-running operations in API services, emphasizing asynchronous work, immediate operation return, and subsequent status querying.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/google/longrunning/README.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Operation Message:
  Description: The primary message for managing long-running operations (LROs).
  Properties:
    name: string
      Description: A unique name for the operation within a particular endpoint.

Operations Service (plural):
  Description: Defines the interface for querying the state of any given operation.
  Methods:
    GetOperation(name: string): Operation
      Description: Retrieves the current status of an asynchronous operation.

Long-running Operation Pattern:
  Step 1: API Backend Initiates Asynchronous Work
    Action: Starts asynchronous work to fulfill the caller's request.
    Output: Generates a unique `Operation` name to refer to the ongoing work.
  Step 2: API Backend Returns Operation
    Action: Immediately returns the `Operation` message back to the caller.
  Step 3: Caller Queries Operations Service
    Action: Invokes API methods defined in the `Operations` service to get the current status of the asynchronous work and discover the final result (success or error).
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger. This approach provides fine-grained control over logging behavior for all Google-based loggers within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-biglake/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in the Python SDK. This is a simple way to activate basic logging across your Google Cloud client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install BeyondCorp ClientGateways Python Library on Windows
DESCRIPTION: Instructions to install the google-cloud-beyondcorp-clientgateways library using venv on Windows systems. This creates an isolated Python environment and installs the package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientgateways/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-beyondcorp-clientgateways
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Anthos Multicloud Python Client on Windows
DESCRIPTION: Instructions for setting up a virtual environment and installing the `google-cloud-gke-multicloud` library on Windows. This method helps in isolating project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-gke-multicloud
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python code demonstrates how to configure a `StreamHandler` for the root `google` logger, setting its level to `DEBUG`. This approach provides fine-grained control over logging behavior for all Google Cloud Python libraries, allowing custom handlers and levels to be applied programmatically.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-org-policy/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Module Logging Programmatically (Python)
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` for detailed output, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-migrationcenter/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Security Center Management Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-securitycentermanagement` library on macOS or Linux systems. It ensures project dependencies are isolated within a dedicated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycentermanagement/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-securitycentermanagement
```

----------------------------------------

TITLE: Configure Specific Google Python Module Logging Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python client library, such as `library_v1`, using the standard `logging` module. It targets the `google.cloud.library_v1` logger, adds a `StreamHandler`, and sets the logging level to `DEBUG` for module-specific control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apphub/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (Specific Module)
DESCRIPTION: This Python example demonstrates how to configure logging for a specific Google Cloud Python client library, like `library_v1`, using the standard `logging` module. It targets the `google.cloud.library_v1` logger, adds a `StreamHandler`, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (All Modules)
DESCRIPTION: This Python code snippet illustrates how to programmatically configure logging for all Google-based Python client libraries. It obtains the `google` logger, adds a `StreamHandler` to output logs, and sets the logging level to `DEBUG` to capture all events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing-budgets/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers in Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG`. This approach programmatically captures all logging events from Google-based modules, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-shell/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Libraries Programmatically (Python)
DESCRIPTION: This Python example illustrates how to set up a stream handler and debug-level logging for all Google-based loggers using Python's standard `logging` module. It targets the 'google' logger to capture events from any Google client library, providing programmatic control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-financialservices/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that all logging events from Google Cloud Python libraries at DEBUG level or higher are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Recommender Python Client Library
DESCRIPTION: Instructions for installing the Google Cloud Recommender Python client library using `pip` within a virtual environment on different operating systems. This ensures isolated dependencies and avoids system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommender/docs/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-recommender
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-recommender
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger, affecting all Google-based loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vm-migration/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Language Library on Windows
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment and install the `google-cloud-language` library on Windows operating systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-language/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-language
```

----------------------------------------

TITLE: Install reCAPTCHA Enterprise Python Client
DESCRIPTION: Instructions to install the `google-cloud-recaptcha-enterprise` library using a Python virtual environment. This process isolates project dependencies and avoids system-wide conflicts, with specific commands for Mac/Linux and Windows.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recaptcha-enterprise/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-recaptcha-enterprise
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-recaptcha-enterprise
```

----------------------------------------

TITLE: Install Google Cloud Config Delivery Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-configdelivery` library on macOS or Linux systems using standard console commands.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-configdelivery
```

----------------------------------------

TITLE: Install Google Places Insights API Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a virtual environment and install the Google Places Insights API Python client library on macOS and Linux systems. It ensures project dependencies are isolated from system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-areainsights/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-maps-areainsights
```

----------------------------------------

TITLE: Install Google Cloud Commerce Consumer Procurement Library on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Commerce Consumer Procurement Python client library on Mac or Linux using a virtual environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-commerce-consumer-procurement/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-commerce-consumer-procurement
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: Demonstrates how to programmatically configure a logging handler for all Google-based loggers using Python's standard 'logging' module. It sets a StreamHandler and DEBUG level for the 'google' logger, allowing fine-grained control over log output directly within your application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-mapsplatformdatasets/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Anthos Multicloud Python Client on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the 'google-cloud-gke-multicloud' library on Windows systems. It helps manage project dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-gke-multicloud
```

----------------------------------------

TITLE: Install Google Cloud Composer Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the Google Cloud Composer client library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-orchestration-airflow
```

----------------------------------------

TITLE: Install Google Cloud Dataform Python Client on Windows
DESCRIPTION: Instructions for installing the Google Cloud Dataform Python client library on Windows. It utilizes a virtual environment (`venv`) to manage dependencies, ensuring a clean and isolated installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dataform
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python example demonstrates how to configure a logging handler for a specific Google Cloud client library, such as `library_v1`, programmatically. It obtains the `google.cloud.library_v1` logger, attaches a `StreamHandler`, and sets its logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iap/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Programmatically Configure Global Google Python Logging
DESCRIPTION: This Python example demonstrates configuring a `StreamHandler` and setting the `DEBUG` logging level for all Google-based loggers (`logging.getLogger("google")`). This allows for advanced, code-based customization of logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute-v1beta/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger. This ensures all Google-based log events are processed and outputted to the console, providing detailed insights into library operations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vmwareengine/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: Demonstrates how to programmatically configure a stream handler and set the logging level to DEBUG for all Google-based loggers by obtaining the 'google' logger instance. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-devicestreaming/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python example illustrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard `logging` mechanism. This provides more granular control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Code Logging for All Google Modules
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apihub/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This example shows how to enable the default logging handler for all loggers under the `google` namespace. By setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, all debug-level events from Google-based loggers will be emitted in a structured format without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-analyticshub/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Using Python `logging`
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud client library (e.g., 'google.cloud.library_v1') using the standard `logging` module. It obtains the logger for the specified module, attaches a `StreamHandler`, and sets its level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Stream Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a StreamHandler for a specific Google client library module's logger (e.g., 'google.cloud.library_v1'). By setting its level to DEBUG, it enables detailed logging for that particular module, allowing for targeted debugging and monitoring.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Source Context on Windows
DESCRIPTION: Installs the Google Cloud Source Context client library in a virtual environment on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-source-context/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-source-context
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python)
DESCRIPTION: This Python code snippet shows how to configure a logging handler for a specific Google Cloud client library, such as `google.cloud.library_v1`. It obtains the logger for the specified module, attaches a `StreamHandler` for console output, and sets its logging level to `DEBUG` for detailed logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Parallelstore Client on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-parallelstore` library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parallelstore/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-parallelstore
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module Programmatically
DESCRIPTION: This Python code snippet shows how to set up a `StreamHandler` for a specific Google Cloud client library's logger, such as `google.cloud.library_v1`. It configures the logger to output `DEBUG` level messages to the console, allowing targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-logging/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Places Insights API Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a virtual environment and install the Google Places Insights API Python client library on Windows. It ensures dependencies are isolated and avoids conflicts with other installed Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-areainsights/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-areainsights
```

----------------------------------------

TITLE: Install Google Cloud Managed Kafka Python Client Library
DESCRIPTION: Instructions for installing the Google Cloud Managed Kafka client library for Python using a virtual environment, applicable for both Mac/Linux and Windows operating systems. This method ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managedkafka/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-managedkafka
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-managedkafka
```

----------------------------------------

TITLE: Install Google Cloud Contact Center AI Insights Python Client
DESCRIPTION: These snippets provide commands to install the Google Cloud Contact Center AI Insights Python client library using `venv` for isolated environments and `pip` for package management. Separate commands are provided for Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-contact-center-insights
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-contact-center-insights
```

----------------------------------------

TITLE: Enable Logging for All Google Modules via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default logging handlers for all Google-based loggers by setting an environment variable. It configures the GOOGLE_SDK_PYTHON_LOGGING_SCOPE to 'google', ensuring that all Google Cloud Python libraries will use the default logging setup.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Global Google SDK Logging via Environment
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to activate default logging for all Google-based Python SDK loggers. This provides a broad logging configuration without requiring code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommender/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Stream Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to programmatically configure a logging handler for a specific Google Cloud client library module, `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler` for console output, and sets its level to `DEBUG`, enabling fine-grained logging for that particular library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module (Python)
DESCRIPTION: This Python code configures a `StreamHandler` for the 'google.cloud.library_v1' logger, setting its level to `DEBUG` to capture all logging events specifically from that client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures logging for all Google Cloud Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Environment Variable Logging for All Google Python Modules
DESCRIPTION: This snippet demonstrates how to enable default logging for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures structured logging for `DEBUG` level or higher events without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-artifact-registry/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Model Armor Python Library on Windows
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-modelarmor` Python library on Windows systems using a virtual environment. It creates a `venv`, activates it, and then installs the package using pip, ensuring isolated dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-modelarmor/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-modelarmor
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment Variable)
DESCRIPTION: This console command enables the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google'.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure All Google Loggers via Environment Variable
DESCRIPTION: Sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable default logging handlers for all loggers within the `google` namespace. This provides a quick way to activate logging across all Google-based client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-deploy/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command enables the default structured logging handler for all loggers within the 'google' namespace. It sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google', ensuring that logging events at DEBUG level or higher from any Google-based library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable default logging for all Google Cloud Python libraries via environment variable
DESCRIPTION: Activate the default structured logging handler for all 'google'-prefixed loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This provides a quick way to enable basic logging across all Google Cloud Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-backup/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for All Google-based Loggers in Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It retrieves the base 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for comprehensive debugging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataflow-client/README.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Run Python Client on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-run` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-run
```

----------------------------------------

TITLE: Install Privileged Access Manager Python Client on Mac/Linux
DESCRIPTION: Instructions for setting up a Python virtual environment and installing the `google-cloud-privilegedaccessmanager` library on macOS and Linux systems. This isolates project dependencies from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-privilegedaccessmanager/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-privilegedaccessmanager
```

----------------------------------------

TITLE: Install Google Cloud Phishing Protection on Mac/Linux
DESCRIPTION: Installs the Google Cloud Phishing Protection client library using `venv` on Mac/Linux systems. This creates an isolated Python environment and installs the package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-phishing-protection/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-phishing-protection
```

----------------------------------------

TITLE: Install Google Cloud Billing Library on Mac/Linux
DESCRIPTION: Installs the Google Cloud Billing client library within a virtual environment on Mac or Linux systems. This ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-billing
```

----------------------------------------

TITLE: Install Google Cloud TPU Client Library on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the google-cloud-tpu library on Windows systems using the command prompt.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-tpu
```

----------------------------------------

TITLE: Install Google Cloud Quotas Python Client on Windows
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Quotas Python client library on Windows systems using a virtual environment to manage dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-quotas/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-quotas
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler for the 'google' logger and sets its level to DEBUG, allowing for custom logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iam/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-products/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable All Google Module Logging via Environment Variable
DESCRIPTION: Sets the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google' to activate the default logging handler for all Google-based loggers in Python applications. This provides broad logging coverage without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-usage/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This configures structured logging at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-marketingplatform-admin/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Add API Key Support for Authentication
DESCRIPTION: The library now supports authentication using API keys, providing an alternative to traditional credentials. This simplifies authentication for certain use cases.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-talent/docs/CHANGELOG.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Authentication:
  Method: API Key
  Description: New support for authenticating requests using an API key.
```

----------------------------------------

TITLE: Install Google Cloud Infrastructure Manager Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-config` library on macOS or Linux systems. Using a virtual environment ensures isolated project dependencies and avoids conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-config/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-config
```

----------------------------------------

TITLE: Install Google Cloud Apigee Connect on Mac/Linux
DESCRIPTION: This snippet provides the commands to set up a Python virtual environment and install the `google-cloud-apigee-connect` library on macOS or Linux systems. It ensures isolated project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-connect/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-apigee-connect
```

----------------------------------------

TITLE: Configure Specific Google Module Logger Programmatically in Python
DESCRIPTION: Provides an example of configuring a `StreamHandler` and `DEBUG` level for a specific Google Cloud Python module's logger (e.g., `google.cloud.library_v1`) using Python's `logging` module. This allows for precise, code-based control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-developerconnect/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger, setting its level to `DEBUG`. This ensures that all logging events from Google-based Python libraries are captured and emitted to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically with Python
DESCRIPTION: This snippet illustrates how to configure logging for Google Cloud Python libraries directly within Python code using the standard `logging` module. It provides examples for setting up a `StreamHandler` and `DEBUG` level for all Google-based loggers or for a specific client library module. By default, events are not propagated to the root logger unless `logging.getLogger("google").propagate = True` is explicitly set.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules Using Python Code
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler to output log messages to the console and sets the logging level to DEBUG for the 'google' logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-certificate-manager/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Libraries Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` to capture all events. This approach offers fine-grained control over logging behavior, including setting propagation if needed.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iam/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Modules
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for all Google-based loggers. This method offers advanced control over logging behavior, allowing customization of handlers, formatters, and levels beyond environment-based settings.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries (Code-Based)
DESCRIPTION: Use Python's standard `logging` module to programmatically configure a handler for all Google-based loggers. This example sets up a `StreamHandler` and `DEBUG` level for the root 'google' logger, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnectors/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all loggers under the 'google' scope. It sets up a StreamHandler to output debug-level messages to the console, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-rapidmigrationassessment/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Telco Automation Library on Mac/Linux
DESCRIPTION: Installs the Google Cloud Telco Automation Python client library in a virtual environment on Mac or Linux systems. This process creates an isolated Python environment to manage project dependencies without clashing with system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-telcoautomation/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-telcoautomation
```

----------------------------------------

TITLE: Install Google Cloud Billing Budgets Library on Mac/Linux
DESCRIPTION: This snippet provides commands to create a Python virtual environment and install the `google-cloud-billing-budgets` library on Mac or Linux. This approach ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing-budgets/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-billing-budgets
```

----------------------------------------

TITLE: Install BigQuery Connection Library on Mac/Linux
DESCRIPTION: Installs the google-cloud-bigquery-connection library within a virtual environment on Mac/Linux systems, ensuring isolated dependencies and avoiding conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-connection/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-cloud-bigquery-connection
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default structured logging handler specifically for the `google.cloud.library_v1` module in Google Cloud Python libraries. This allows for targeted logging configuration for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managedkafka/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default logging handler for a particular Google Cloud Python module, such as `google.cloud.library_v1`, by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This limits logging configuration to the specified module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Specific Google Module Logging via Environment Variable
DESCRIPTION: This example demonstrates enabling default structured logging for a particular Google Cloud client library module (e.g., `google.cloud.library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This allows for targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install Google Cloud Phishing Protection on Windows
DESCRIPTION: Installs the Google Cloud Phishing Protection client library using `venv` on Windows systems. This creates an isolated Python environment and installs the package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-phishing-protection/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-phishing-protection
```

----------------------------------------

TITLE: Install Google Cloud Access Approval Library on Windows
DESCRIPTION: Installs the Google Cloud Access Approval client library in a virtual environment on Windows systems. This uses `venv` to create an isolated Python environment and `pip` to install the package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-approval/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-access-approval
```

----------------------------------------

TITLE: Install Google Cloud Dataplex Python Client on Windows
DESCRIPTION: This snippet provides instructions for installing the `google-cloud-dataplex` Python client library on Windows. It outlines the process of setting up and activating a Python virtual environment with `venv`, and then installing the library using `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dataplex
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in the Python SDK. This provides a quick way to activate basic logging across all Google client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vmwareengine/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures logging for any `google`-prefixed module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting an environment variable. This configures logging events at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-scheduler/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: Configures the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to enable default logging handlers for all Google-based loggers in Python client libraries. This setting applies globally to any Google Cloud Python client library instantiated in the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommendations-ai/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications. This is a simple way to activate basic logging across your Google Cloud Python dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default logging for all Google-based Python client libraries by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This provides basic structured logging without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Telco Automation Library on Windows
DESCRIPTION: Installs the Google Cloud Telco Automation Python client library in a virtual environment on Windows systems. This creates an isolated Python environment to manage project dependencies, preventing conflicts with other projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-telcoautomation/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-telcoautomation
```

----------------------------------------

TITLE: Install Google Cloud Notebooks Client on Windows
DESCRIPTION: This snippet provides instructions for installing the `google-cloud-notebooks` Python client library on Windows. It guides users through creating and activating a virtual environment using `venv` and then installing the library via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-notebooks/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-notebooks
```

----------------------------------------

TITLE: Install Google Cloud Workstations Client Library on Windows
DESCRIPTION: Instructions to set up a virtual environment and install the Google Cloud Workstations Python client library on Windows systems using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-workstations
```

----------------------------------------

TITLE: Install Google Cloud Container Analysis Client on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the Google Cloud Container Analysis client library on macOS or Linux systems using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-containeranalysis/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-containeranalysis
```

----------------------------------------

TITLE: Install Google Cloud Essential Contacts Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-essential-contacts` library on macOS or Linux systems. It ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-essential-contacts/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-essential-contacts
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules Using Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler for all Google-based loggers. It sets the logger named 'google' to DEBUG level, allowing fine-grained control over logging behavior within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gdchardwaremanagement/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based Python client libraries. It obtains the `google` logger, adds a `StreamHandler`, and sets the logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: This Python code configures a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG`. This allows for advanced, programmatic control over logging events from all Google-based Python modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnectors/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Loggers
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers programmatically. It obtains the "google" logger, adds a `StreamHandler` to emit messages to the console, and sets the logging level to `DEBUG`. This method offers more granular control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-telcoautomation/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for all Google-based loggers. It sets the logger named 'google' to `DEBUG` level, ensuring all events from Google libraries are captured and emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vpc-access/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default logging handler specifically for the `library_v1` module within Google Cloud Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-admanager/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging Handler for Specific Google Module (Environment)
DESCRIPTION: This example shows how to enable the default logging handler for a specific Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope, such as `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-source-context/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: This Python example illustrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output logs, and sets its level to `DEBUG`, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers in Python
DESCRIPTION: Set up a `StreamHandler` and `DEBUG` level for all `google`-prefixed loggers using Python's standard `logging` module. This provides fine-grained control over how logging events from Google Cloud libraries are handled within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for the base `google` logger. This approach provides programmatic control over logging for all Google-based loggers, allowing for custom handlers and levels.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Notebooks Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-notebooks` Python client library on Mac or Linux systems. It utilizes `venv` to create an isolated Python environment, activate it, and then install the package using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-notebooks/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-notebooks
```

----------------------------------------

TITLE: Install Google Cloud Vision Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-vision` client library on macOS or Linux. It ensures project dependencies are isolated from system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-vision
```

----------------------------------------

TITLE: API Breaking Changes: Field Renames in Cloud Build Python Client
DESCRIPTION: Documents breaking changes introduced in version 3.0.0 of the Google Cloud Build Python client library. Specifically, several fields were renamed to avoid conflicts with Python built-in names. Users must update their code to use the new field names (e.g., `object` to `object_`).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/CHANGELOG.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
StorageSource:
  object: Renamed to object_
RepoSource:
  dir: Renamed to dir_
BuildStep:
  dir: Renamed to dir_
Hash:
  type: Renamed to type_
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google library are captured and emitted in a structured format.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gsuiteaddons/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python SDK applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (All Google)
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`. This provides fine-grained control over logging for all Google Cloud Python modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datatransfer/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers in Python
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers programmatically. It retrieves the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`, ensuring all Google Cloud Python library logs are captured and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: Illustrates how to set up a logging handler for all Google-based loggers directly in Python code. It gets the "google" logger, adds a StreamHandler, and sets the logging level to DEBUG, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datalabeling/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Cloud Python Logging with Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root 'google' logger and set its level to `DEBUG`. This ensures all Google-based modules' logging events are captured and emitted to the console, offering fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-routing/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud client library module (e.g., 'library_v1'). It sets up a StreamHandler for the module's logger, allowing custom logging for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datatransfer/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Using Python Code
DESCRIPTION: This Python code snippet shows how to programmatically configure a logging handler for a specific Google client library module, such as `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, allowing for targeted logging configuration for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module
DESCRIPTION: Illustrates how to set up a `StreamHandler` for a specific Google module's logger (e.g., `google.cloud.library_v1`) directly in Python code. This allows for targeted logging configuration, enabling `DEBUG` level messages for a particular client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google client library's logger (e.g., `google.cloud.library_v1`). Setting its level to `DEBUG` ensures that all logging events from that particular module are captured, allowing for targeted debugging or monitoring.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-data/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Using Python's Logging Module
DESCRIPTION: Demonstrates how to programmatically configure a StreamHandler for a specific Google Cloud Python client library's logger (e.g., 'google.cloud.library_v1'). This sets its level to DEBUG to capture module-specific logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-binary-authorization/README.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google module, such as `google.cloud.library_v1`, using the standard `logging` mechanism. It obtains the module's logger, attaches a `StreamHandler` to direct output to the console, and sets its level to `DEBUG` for comprehensive logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-analyticshub/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Python Logging via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a simple, system-wide way to activate basic logging for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apphub/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Modules via Environment Variable
DESCRIPTION: This example shows how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This applies a broad logging configuration across all Google Cloud Python SDK components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iap/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a quick way to activate logging across all Google Cloud Python modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-ca/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This example demonstrates how to enable default logging for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures structured logging for `DEBUG` level events and higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-management/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: Configure logging for a specific Google client library, such as `google.cloud.library_v1`, using Python's `logging` module. This example demonstrates setting a `StreamHandler` and `DEBUG` level for a targeted logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Feature: Add API Key Support to Python Client
DESCRIPTION: Introduces support for API keys, providing an alternative authentication method for the client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-binary-authorization/CHANGELOG.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
add api key support
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a stream handler and set the logging level for all Google-based loggers. It uses Python's standard 'logging' module to gain fine-grained control over logging events from Google Cloud libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Libraries
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-source-context/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging for All Google Cloud Libraries
DESCRIPTION: This Python snippet illustrates how to configure a custom logging handler for all Google-based loggers using the standard `logging` module. It sets up a `StreamHandler` for the `google` logger, ensuring `DEBUG` level messages and higher are processed. This method provides more control than environment-based configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parametermanager/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers via Environment Variable
DESCRIPTION: This console command sets the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google', enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-quota/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Module
DESCRIPTION: Set up a `StreamHandler` and `DEBUG` level logging for a specific Google Cloud Python client library (e.g., `google.cloud.library_v1`) using the standard `logging` module. This allows targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-essential-contacts/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default logging handler for a particular Google module, such as `google.cloud.library_v1`, using the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This allows focused logging for a specific client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iam-logging/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler`, and sets its level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientgateways/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`). It targets the module's logger, adds a `StreamHandler`, and sets its level to `DEBUG`, allowing for precise logging control for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers with Python Code
DESCRIPTION: This Python example illustrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for all loggers under the 'google' namespace. This method offers fine-grained control over logging behavior, including custom handlers and levels.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-backup/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the base 'google' logger. This approach allows for programmatic control over logging for all Google-based loggers within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default structured logging handler for all Google-based Python loggers. This configures logging events at `logging.DEBUG` level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storagebatchoperations/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Programmatically for All Google Modules
DESCRIPTION: Use Python's standard `logging` module to obtain the top-level 'google' logger, add a `StreamHandler` to output logs, and set its level to `DEBUG` to capture detailed logging events from all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries (Code)
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the base `google` logger, ensuring all Google-based Python library logs are processed.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc-publishing/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Apps Script Type Protos Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the Google Apps Script Type Protos Python client library on Mac or Linux systems using a virtual environment (`venv`). It creates an isolated Python environment, activates it, and then installs the library using pip, ensuring dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-apps-script-type
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: This Python example demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Source Context Library on Mac/Linux
DESCRIPTION: This snippet provides commands to install the Google Cloud Source Context Python client library on Mac/Linux systems using a virtual environment. It creates a venv, activates it, and then installs the package via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-source-context/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-source-context
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-developerconnect/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers (Code)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a StreamHandler for the base 'google' logger, setting its level to DEBUG. This ensures all logging events from Google-based modules are processed and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dlp/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for comprehensive output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-domains/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Loggers
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a StreamHandler for the base 'google' logger, setting its level to DEBUG. This ensures all logging events from Google-based loggers are handled and displayed.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Memorystore for Redis Client on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-redis-cluster` library on macOS or Linux. It ensures project dependencies are isolated from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis-cluster/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-redis-cluster
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers Programmatically in Python
DESCRIPTION: This Python snippet illustrates how to set up a logging handler for all Google-based loggers using Python's standard `logging` mechanism. It gets the 'google' logger, adds a `StreamHandler`, and sets the level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-domains/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Loggers
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based modules are handled and displayed, providing detailed output for debugging purposes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-reviews/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture all messages. This provides programmatic control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Using Python Code
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python module, `google.cloud.library_v1`. This provides fine-grained control over logging for individual client libraries, allowing targeted debugging and monitoring.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dlp/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Custom Logging Handler for Specific Google Python Module in Code
DESCRIPTION: Shows how to programmatically configure a logging handler for a specific Google client library, like `google.cloud.library_v1`, using Python's `logging` module. It targets the specific logger, adds a `StreamHandler`, and sets its logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It gets the `google` logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-retail/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommendations-ai/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python client libraries. This provides a broad logging configuration that applies across all Google Cloud modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging via Environment Variable
DESCRIPTION: Demonstrates how to enable default logging handlers for Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This method allows for quick configuration of logging across all Google-based loggers or for a specific module, such as `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-meet/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install google-cloud-dialogflow and run migration fixup scripts
DESCRIPTION: This snippet provides instructions for installing the `google-cloud-dialogflow` library and using the provided `fixup_dialogflow_v2_keywords.py` and `fixup_dialogflow_v2beta1_keywords.py` scripts. These scripts assist in converting existing code to the new method call patterns by processing an input directory and writing to an empty destination directory.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/UPGRADING.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ python3 -m pip install google-cloud-dialogflow
```

LANGUAGE: sh
CODE:
```
$ fixup_dialogflow_v2_keywords.py --input-directory .samples/ --output-directory samples/
```

----------------------------------------

TITLE: Install Google Cloud Secret Manager on Mac/Linux
DESCRIPTION: Instructions to install the Google Cloud Secret Manager Python client library on Mac/Linux systems using a virtual environment. This isolates project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-secret-manager
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This example shows how to enable default structured logging for a specific Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's period-separated namespace. This configures handling of logging events at `logging.DEBUG` level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries (Environment)
DESCRIPTION: This snippet shows how to enable default logging for all Google-based loggers by setting an environment variable. Logging events at DEBUG level or higher will be handled in a structured format.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policy-troubleshooter/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-metrics-scopes/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Cloud Loggers
DESCRIPTION: This Python code demonstrates how to programmatically configure a `StreamHandler` for the base `google` logger, setting its level to `DEBUG`. This ensures all logging events from Google Cloud Python client libraries are emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-hub/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Google Cloud Python Client Concurrency Best Practices
DESCRIPTION: Explains the thread-safety of Google Cloud Python client instances and provides a best practice for their creation in multiprocessing scenarios to avoid issues related to `os.fork`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Client Instance Concurrency:
  - Thread Safety:
    - Client instances are safe to share across threads.
    - Reason: Uses the `grpc` library, which is thread-safe.
  - Multiprocessing Best Practice:
    - Scenario: When using `multiprocessing.pool.Pool` or `multiprocessing.Process`.
    - Action: Create client instances *after* the invocation of `os.fork`.
    - Rationale: Ensures proper resource handling and avoids potential issues with pre-forked connections or states.
```

----------------------------------------

TITLE: Install Privileged Access Manager Python Client on Windows
DESCRIPTION: Instructions for setting up a Python virtual environment and installing the `google-cloud-privilegedaccessmanager` library on Windows systems. This isolates project dependencies from system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-privilegedaccessmanager/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-privilegedaccessmanager
```

----------------------------------------

TITLE: Configure Environment Logging for Specific Google Python Module
DESCRIPTION: This example shows how to enable default logging for a specific Google Cloud Python client library, such as `library_v1`, using the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This targets logging to a particular module's namespace.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apihub/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Python Logging for All Google Client Libraries Programmatically
DESCRIPTION: This Python code snippet illustrates how to configure logging for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture detailed messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vm-migration/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging for All Google Libraries Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG`. This ensures that all logging events from any Google-based Python client library are handled and outputted to the console, providing more control than environment-based configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gsuiteaddons/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically configure a `StreamHandler` for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler`, and sets its level to `DEBUG` to capture all relevant logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-management/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet illustrates how to programmatically configure logging for all loggers under the `google` namespace. It sets up a `StreamHandler` to output log messages to the console and sets the logging level to `DEBUG` for comprehensive logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-dashboards/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Modules
DESCRIPTION: This Python example illustrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`, providing fine-grained control over log handling.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-automl/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: This Python code snippet illustrates how to configure a logging handler for all Google-based loggers using Python's standard 'logging' mechanism. It retrieves the 'google' logger, adds a StreamHandler, and sets the logging level to DEBUG to capture all events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-texttospeech/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler for all Google-based loggers. It retrieves the 'google' logger, adds a StreamHandler, and sets its level to DEBUG to capture all relevant logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-ids/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Introduce V1 Version of Parallelstore API
DESCRIPTION: Adds the version 1 (v1) of the Google Cloud Parallelstore API, marking a stable release of the API.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parallelstore/CHANGELOG.md#_snippet_31

LANGUAGE: APIDOC
CODE:
```
Adding v1 version of Parallelstore API.
```

----------------------------------------

TITLE: Feature: Add Context Manager Support to Python Shell Client v1.1.0
DESCRIPTION: This feature introduces context manager support for the client. This allows for cleaner resource management using `with` statements, ensuring resources are properly acquired and released.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-shell/docs/CHANGELOG.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
New Feature:
  Client:
    Functionality: Context manager support added.
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a StreamHandler and set the logging level to DEBUG for a specific Google Cloud Python client library module's logger (e.g., 'google.cloud.library_v1'). This provides fine-grained control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-conversions/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for Specific Google Module via Environment Variable
DESCRIPTION: Illustrates how to enable the default logging handler for a specific Google Cloud Python client library module by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope, e.g., `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This example shows how to enable default structured logging for a specific Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its full scope, such as `google.cloud.library_v1`. This allows targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgecontainer/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Python Logging for All Google Modules
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a StreamHandler to output logs to the console, and sets the logging level to DEBUG for comprehensive output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the `google` logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` to capture all events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Module
DESCRIPTION: Set up logging for a specific Google Cloud Python client library module programmatically. This example configures a `StreamHandler` and sets the logging level to `DEBUG` for a module-specific logger, such as "google.cloud.library_v1".
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycenter/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud client library, `google.cloud.library_v1`, using the standard `logging` module. It obtains the module-specific logger, attaches a `StreamHandler` for console output, and sets the logging level to `DEBUG` for detailed logging. This allows fine-grained, code-based logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment Variable
DESCRIPTION: This example demonstrates how to enable the default logging handler for a specific Google Cloud client library, such as `google.cloud.library_v1`. Setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope ensures that only events from that specific library are handled by the default logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-analyticshub/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default structured logging handler for a specific Google Cloud Python client library module (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope. This allows targeted logging configuration without affecting other modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Specific Google Module Logger with StreamHandler in Python
DESCRIPTION: Illustrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python module's logger, such as `google.cloud.library_v1`. This allows setting a `DEBUG` level and directing logs to the console for a particular client library, offering granular control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python Code)
DESCRIPTION: Shows how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library's logger (e.g., `google.cloud.library_v1`). This allows targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-quotas/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries (Code)
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers using the standard 'logging' module. It retrieves the 'google' logger, adds a StreamHandler to output messages, and sets the logging level to DEBUG to capture all events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientconnectorservices/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: Shows how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google module logger (e.g., `google.cloud.library_v1`) using Python's standard `logging` module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-admanager/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging Propagation to Root Logger in Python
DESCRIPTION: This snippet provides guidance on how to explicitly enable logging event propagation from the 'google'-level logger up to the root logger. By default, Google Cloud Python client library logs do not propagate, and this setting is necessary if you need them to be handled by the root logger's configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-multicloud/README.rst#_snippet_6

LANGUAGE: python
CODE:
```
logging.getLogger("google").propagate = True
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using the standard `logging` module. It targets the root 'google' logger, providing a programmatic way to manage logging across all Google client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-lustre/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Infrastructure Manager Python Client on Windows
DESCRIPTION: Instructions for setting up a virtual environment and installing the Google Cloud Infrastructure Manager Python client library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-config/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-config
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-directory/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (All Modules)
DESCRIPTION: This Python snippet illustrates how to set up a `StreamHandler` and `DEBUG` level logging for all Google-based loggers using the standard `logging` module. It retrieves the "google" base logger and attaches a handler to output log messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google-Based Loggers
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a standard `logging.StreamHandler` for the root `google` logger. It sets the logging level to `DEBUG` and directs all Google-based logging events to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datapolicies/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables default structured logging for all Google-based Python client libraries, capturing events at DEBUG level or higher without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-modelarmor/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This example demonstrates how to enable default logging for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures structured logging for `DEBUG` level events and higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-modelarmor/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This example demonstrates how to enable the default logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a quick way to activate logging across all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-type/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically set up a `StreamHandler` for the base 'google' logger. It configures the logger to capture `logging.DEBUG` level events and higher, allowing for custom handling of all Google-related logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-cloudcontrolspartner/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default logging for a specific Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its full module path. This allows targeted structured logging for `DEBUG` level events and higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Python Logging for a Specific Google Module Programmatically
DESCRIPTION: Demonstrates how to use Python's `logging` module to set up a `StreamHandler` and `DEBUG` level for a specific Google Cloud client library's logger, such as `google.cloud.library_v1`. This provides fine-grained control over logging behavior for individual components within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Introduce New API Elements in Google Cloud Asset v3.30.0
DESCRIPTION: This snippet documents the new API elements introduced in version 3.30.0 of the `google-cloud-asset` library. It includes the addition of a new field `enrichments` to `ResourceSearchResult`, the introduction of new messages `AssetEnrichment` and `ResourceOwners`, and new enum values `GOVERN_TAGS` and `REMOVE_GRANT` within `MethodType`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/docs/CHANGELOG.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
// New field added to existing message
message google.cloud.asset.v1.ResourceSearchResult {
  google.cloud.asset.v1.AssetEnrichment enrichments = <field_number>;
}

// New message definition
message google.cloud.asset.v1.AssetEnrichment {}

// New message definition
message google.cloud.asset.v1.ResourceOwners {}

// New enum values added to existing enum
enum google.cloud.asset.v1.MethodType {
  GOVERN_TAGS = <enum_value>;
  REMOVE_GRANT = <enum_value>;
}
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Programmatically in Python
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers using the standard 'logging' module. It sets a StreamHandler and DEBUG level for the 'google' logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-scheduler/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Examples of valid and invalid method calls with request objects and keyword arguments
DESCRIPTION: This snippet demonstrates correct and incorrect ways to call methods in `google-cloud-dialogflow` 2.0.0+. It highlights that the `request` parameter and flattened keyword parameters are mutually exclusive. Passing both will result in an error, as shown in the invalid example.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/UPGRADING.md#_snippet_4

LANGUAGE: python
CODE:
```
response = client.create_context(
    request={
        "parent": "parent_value",
        "context": dialogflow.Context(name="name_value"),
    }
)
response = client.create_context(
    parent="parent_value",
    context=dialogflow.Context(name="name_value"),
)
```

LANGUAGE: python
CODE:
```
response = client.create_context(
    request={
        "parent": "parent_value",
    },
    context=dialogflow.Context(name="name_value"),
)
```

----------------------------------------

TITLE: Install Google Cloud VPC Access Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-vpc-access` library on Windows systems. It allows for isolated project dependencies without system-wide conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vpc-access/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-vpc-access
```

----------------------------------------

TITLE: Install Google Cloud Secret Manager on Windows
DESCRIPTION: This snippet provides instructions for setting up a Python virtual environment with `venv` and installing the `google-cloud-secret-manager` library on Windows. It helps manage project dependencies in an isolated environment and prevents system-wide package conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-secret-manager
```

----------------------------------------

TITLE: Install Google Cloud Batch Python Library on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-batch` library on macOS and Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-batch/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-batch
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module (Python)
DESCRIPTION: Demonstrates how to configure a logging handler for a specific Google Cloud client library using Python's standard `logging` module. It sets a `StreamHandler` and `DEBUG` level for the 'google.cloud.library_v1' logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workflows/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module (Python Code)
DESCRIPTION: Shows how to programmatically configure a StreamHandler and set the DEBUG level for a specific Google Cloud Python client library's logger (e.g., 'google.cloud.library_v1').
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-confidentialcomputing/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure StreamHandler for all Google Python loggers programmatically
DESCRIPTION: Use Python's standard 'logging' mechanism to get the 'google' logger, add a StreamHandler to it, and set its level to DEBUG to capture all Google-based logging events programmatically.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for a specific Google Cloud Python module, such as 'google.cloud.library_v1'. It retrieves the module's logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG` for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-containeranalysis/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Libraries in Python
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for all 'google'-prefixed loggers. This method offers more control over logging behavior compared to environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging for All Google Modules
DESCRIPTION: This Python example demonstrates how to programmatically configure the top-level `google` logger by adding a `StreamHandler` and setting its level to `DEBUG`. This enables detailed, code-based logging for all Google-related modules, potentially overriding environment settings if applied first.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommender/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Chronicle Client Library on Windows
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Chronicle client library on Windows systems. It outlines the steps to create and activate a Python virtual environment, followed by installing the library using pip, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-chronicle/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-chronicle
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Programmatically
DESCRIPTION: This Python code snippet demonstrates how to configure logging for all Google-based modules using the standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managed-identities/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the `google` logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, providing detailed visibility into the entire Google Python SDK's operations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-mapsplatformdatasets/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for all Google-based loggers by obtaining the 'google' logger instance. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific Google client library's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`. This allows fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-lfp/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Module Logging Programmatically (Python)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google client library, such as `google.cloud.library_v1`. It retrieves the module-specific logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, enabling precise control over logging output for particular components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-migrationcenter/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based modules are captured and outputted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-lfp/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Handler for Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to configure a logging handler for a specific Google Cloud Python client library, `google.cloud.library_v1`. It obtains the module-specific logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, offering fine-grained logging control within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-logging/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable propagation of Google Python logging events to root logger
DESCRIPTION: By default, logging events from Google-level loggers do not propagate to the root logger. To enable this, explicitly set logging.getLogger("google").propagate = True in your Python code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/README.rst#_snippet_6

LANGUAGE: python
CODE:
```
logging.getLogger("google").propagate = True
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: Illustrates how to configure a logging handler for all Google-based loggers using Python's standard `logging` module. It sets a `StreamHandler` and `DEBUG` level for the 'google' logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workflows/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules
DESCRIPTION: Demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger in Python. This sets the logging level to `DEBUG` and directs all Google-based log messages to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging Handler for Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default logging handler specifically for the `library_v1` Google Cloud module. This allows for targeted logging activation without affecting other modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-usage/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger. It sets the logger's level to `DEBUG` to capture all logging events from any Google-based module, providing fine-grained control over logging behavior within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-data/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers via Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers using the standard `logging` module. It sets up a `StreamHandler` for the 'google' logger and sets its level to `DEBUG`, offering fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python example shows how to programmatically configure a `StreamHandler` for all Google-based loggers by getting the 'google' logger, adding a handler, and setting its level to `DEBUG`. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a stream handler and set the logging level to DEBUG for a specific Google Cloud Python client library, such as `library_v1`. It targets the specific logger instance for that module, allowing fine-grained logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Programmatically
DESCRIPTION: This Python example demonstrates how to configure a stream handler and set the logging level to DEBUG for a specific Google Cloud Python client library (e.g., `library_v1`) using Python's standard `logging` mechanism. This allows for module-specific logging configurations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Python Module Programmatically
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library module, `google.cloud.library_v1`. This allows for module-specific logging configuration, independent of other Google modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Library Logging via Python Code (Specific Google Module)
DESCRIPTION: Use Python's standard `logging` mechanism to configure a `StreamHandler` and set the `DEBUG` level for a specific Google module's logger (e.g., `google.cloud.library_v1`), enabling detailed logging for that particular Python client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-oracledatabase/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Migration Center Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-migrationcenter` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-migrationcenter/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-migrationcenter
```

----------------------------------------

TITLE: New Feature: GPU Configuration for Cloud Run Services
DESCRIPTION: Cloud Run Services now support GPU configuration, allowing users to specify GPU resources for their service instances.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/CHANGELOG.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Google Cloud Run v2.Service:
  New field/capability: GPU configuration
    Purpose: Allocate GPU resources to service instances.
```

----------------------------------------

TITLE: Install Google APIs Common Protos Python Library
DESCRIPTION: Instructions for installing the `googleapis-common-protos` Python client library within a virtual environment using `venv` and `pip` on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install googleapis-common-protos
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install googleapis-common-protos
```

----------------------------------------

TITLE: Enhance Asynchronous Client and Context Manager Behavior in Google Cloud Python
DESCRIPTION: Details improvements to asynchronous client operations, including using `retry_async` instead of `retry` and adding async context manager return types.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appgateways/docs/CHANGELOG.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
- Use `retry_async` instead of `retry` in async client
- Add async context manager return types
- Add context manager return types
```

----------------------------------------

TITLE: Configure Logging Programmatically in Python
DESCRIPTION: This method demonstrates how to configure logging using Python's standard `logging` module. It shows how to get a logger for all Google-based modules or a specific client library, add a stream handler, and set the logging level to DEBUG.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-essential-contacts/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Security Center Management Library
DESCRIPTION: Instructions to install the Google Cloud Security Center Management Python client library using a virtual environment, with separate commands for Mac/Linux and Windows.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycentermanagement/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-securitycentermanagement
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-securitycentermanagement
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module (Environment Variable)
DESCRIPTION: This console command configures the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable for a specific Google Cloud client library, such as `google.cloud.library_v1`. It enables the default logging handler only for that particular module, allowing for more granular control over logging activation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Specific Google Cloud Python Module Logging via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module's scope (e.g., `google.cloud.library_v1`) to enable default logging handlers for that particular Google Cloud Python client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging Handler for Specific Google Module (Environment)
DESCRIPTION: Configure logging for a specific Google Cloud Python client library module by setting an environment variable to enable its default logging handler. This example targets a client library named 'library_v1' within 'google.cloud'.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-functions/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Cloud Python Module (Environment Variable)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path (e.g., `google.cloud.library_v1`). This enables default structured logging only for that particular Google Cloud Python client library at `DEBUG` level or higher, without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-privilegedaccessmanager/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Logging for a Specific Google Module via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module's namespace, such as `google.cloud.library_v1`, to enable default structured logging for that particular Google client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python code snippet illustrates how to configure a logging handler for all Google-based loggers programmatically. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grpc-google-iam-v1/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically with Python
DESCRIPTION: Illustrates how to configure logging handlers for Google Cloud Python libraries using Python's standard 'logging' module. This allows setting up handlers and logging levels for all Google-based loggers or a specific client library module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-reports/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: Demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the `google` logger using Python's standard `logging` module, affecting all Google-based loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-admanager/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Python: Configure Logging Handler for All Google Modules
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler to output debug-level messages from the 'google' logger, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Handler for Specific Google Module via Environment Variable
DESCRIPTION: This command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default logging handler specifically for the `google.cloud.library_v1` module. This allows granular control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb-connectors/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install Google Cloud Organization Policy Python Client
DESCRIPTION: Instructions for installing the `google-cloud-org-policy` Python client library using `pip` within a virtual environment. This snippet provides commands for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-org-policy/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-org-policy
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-org-policy
```

----------------------------------------

TITLE: Configure Logging Programmatically for a Specific Google Module
DESCRIPTION: This example demonstrates configuring logging for a specific Google Cloud Python client library, such as `library_v1`, using Python's `logging` module. It targets the module's specific logger, adds a `StreamHandler`, and sets the logging level to `DEBUG` for detailed output from that module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-financialservices/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Scope for All Google Modules via Environment Variable
DESCRIPTION: Demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a broad logging configuration for all Google client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Common on Mac/Linux
DESCRIPTION: Instructions to install the `google-cloud-common` library on Mac/Linux systems using a Python virtual environment. This involves creating a venv, activating it, and then installing the package via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-common
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for a specific Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its specific scope. This allows focused logging for a particular module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-ordertracking/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Python Module via Environment Variable
DESCRIPTION: Sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path, such as `google.cloud.library_v1`, to enable the default logging handler only for that particular Google client library. This provides granular control over logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install Google Cloud API Keys Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-api-keys` client library on Windows. It ensures dependencies are isolated from system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-api-keys
```

----------------------------------------

TITLE: Install Google Cloud Live Stream Library on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-video-live-stream` library on Windows. It ensures that project dependencies are isolated from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-live-stream/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-video-live-stream
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the root `google` logger, setting its level to `DEBUG`. This ensures all logging events from Google Cloud Python libraries are handled and outputted to the console, offering more control than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud API Hub Client Library on Mac/Linux
DESCRIPTION: This snippet provides the console commands to create a Python virtual environment, activate it, and install the `google-cloud-apihub` library on macOS and Linux systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apihub/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-apihub
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`. This allows for module-specific logging customization, independent of other Google libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-binary-authorization/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Data QnA Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the `google-cloud-data-qna` library on macOS or Linux systems. It uses `venv` for environment isolation and `pip` for package installation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-data-qna
```

----------------------------------------

TITLE: Configure Stream Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific Google Cloud Python client library's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`. This allows for fine-grained logging configuration for individual modules within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically (Specific Module)
DESCRIPTION: This Python snippet demonstrates how to configure a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`). It retrieves the 'google.cloud.library_v1' logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG`. This allows targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datatransfer/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for a specific Google Cloud Python client library, such as 'google.cloud.library_v1'. It retrieves the module's logger, attaches a StreamHandler, and sets the logging level to DEBUG for fine-grained control over log output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-webrisk/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: Set up a `StreamHandler` and `DEBUG` level for a specific Google Cloud Python client library (e.g., `library_v1`) using Python's standard `logging` module. This allows targeted logging configuration for individual libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Cloud Python Library
DESCRIPTION: This Python code snippet shows how to programmatically configure logging for a specific Google Cloud Python library (e.g., `google.cloud.library_v1`). It retrieves the module's logger, attaches a `StreamHandler` for console output, and sets its logging level to `DEBUG` for comprehensive logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-ids/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Assured Workloads Python Library
DESCRIPTION: These snippets demonstrate how to install the `google-cloud-assured-workloads` Python client library in a virtual environment. Instructions are provided for both Mac/Linux and Windows operating systems, ensuring isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-assured-workloads
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-assured-workloads
```

----------------------------------------

TITLE: Install Google Shopping Type Client Library on Mac/Linux
DESCRIPTION: Provides commands to set up a virtual environment using `venv` and install the `google-shopping-type` Python client library on macOS and Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-type/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-type
```

----------------------------------------

TITLE: Install Google Cloud VPC Access Python Client
DESCRIPTION: This snippet provides instructions for installing the Google Cloud VPC Access Python client library using `venv` on different operating systems. It demonstrates how to create an isolated Python environment and install the package without needing system installation permissions.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vpc-access/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-vpc-access
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-vpc-access
```

----------------------------------------

TITLE: Install Google Cloud Private CA Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-private-ca` library on macOS or Linux systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-ca/docs/README.rst#_snippet_0

LANGUAGE: bash
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-private-ca
```

----------------------------------------

TITLE: Install Google Cloud Dialogflow Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to install the `google-cloud-dialogflow` Python client library on Mac or Linux using a virtual environment. It creates an isolated environment, activates it, and then installs the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dialogflow
```

----------------------------------------

TITLE: Install Google Cloud Lustre Python Client on Mac/Linux
DESCRIPTION: This snippet provides command-line instructions for setting up a virtual environment and installing the Google Cloud Managed Lustre Python client library on macOS or Linux. Using a virtual environment isolates project dependencies, preventing conflicts with other Python projects or system-wide installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-lustre/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-lustre
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG`. This provides explicit, code-based control over logging for all Google Cloud Python libraries, allowing customization of handlers and formatters.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientconnectorservices/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud VPC Access Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-vpc-access` library on macOS or Linux systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vpc-access/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-vpc-access
```

----------------------------------------

TITLE: Install Google Cloud Config Delivery Library on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the google-cloud-configdelivery library on macOS or Linux systems, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-configdelivery
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment
DESCRIPTION: Sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path (e.g., `google.cloud.library_v1`) to enable default logging only for that particular Google Cloud client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contentwarehouse/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Loggers
DESCRIPTION: This Python snippet illustrates how to programmatically configure a `StreamHandler` for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler`, and sets its level to `DEBUG`, providing fine-grained control over logging output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-logging/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` for comprehensive logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-containeranalysis/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Cloud Python Module Logging Programmatically
DESCRIPTION: This Python example shows how to programmatically configure logging for a specific Google Cloud Python client library (e.g., `library_v1`). It targets the module's specific logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging Handler for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default structured logging handler for a specific Google Cloud Python client library (e.g., 'library_v1') by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to its specific scope, such as 'google.cloud.library_v1'. This limits the default handler to the specified module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-registry/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Environment-Based Logging for a Specific Google Module
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module scope, like `google.cloud.library_v1`, to enable default structured logging only for that particular Google client library or module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module (Environment Variable)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module scope (e.g., `google.cloud.library_v1`), enabling the default logging handler only for that particular Google Cloud client library. This configuration is applied upon the first instantiation of any client library, if the loggers are not already configured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default logging handler for a specific Google Cloud client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vision/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module (Environment Variable)
DESCRIPTION: This console command enables the default logging handler for a specific Google module (e.g., 'library_v1') by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's scope.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default logging handler for a specific Google Cloud Python module, such as 'google.cloud.library_v1', by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable. This allows for granular control over logging configurations for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-services/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default structured logging for a specific Google Cloud Python module, such as `google.cloud.library_v1`, by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's full scope. This allows targeted logging configuration for a particular client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module (Environment)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module namespace (e.g., `google.cloud.library_v1`), enabling the default structured logging handler only for that Google Python client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc-publishing/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Cloud Python Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path (e.g., `google.cloud.library_v1`), enabling the default logging handler only for that particular Google Cloud Python client library. This allows for targeted logging configuration without affecting other modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Libraries
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`. This method offers fine-grained control over logging behavior and output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handlers Programmatically in Python for Google Cloud SDK
DESCRIPTION: Illustrates how to configure logging handlers and levels for Google Cloud Python SDK using Python's standard `logging` module. This allows for fine-grained control over logging for either all Google-based loggers or a specific client library module, enabling advanced customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iam-logging/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: This Python code configures a `StreamHandler` for the top-level 'google' logger, setting its level to `DEBUG` to capture all logging events from Google-based modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure logging handler for all Google-based loggers in Python
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a `StreamHandler` for the base 'google' logger. It sets the logger's level to `DEBUG`, ensuring all Google-related logging events are captured and emitted to the console, offering more control than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging: Set Up Handler for All Google Loggers in Python
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets its level to `logging.DEBUG` to capture detailed logs.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python example illustrates how to configure a logging handler for all Google-based loggers programmatically. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iap/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Loggers
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for all Google-based loggers using the standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler` to output messages, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-connect/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud App Engine Admin Library on Windows
DESCRIPTION: Instructions to install the `google-cloud-appengine-admin` library in a virtual environment on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-admin/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-appengine-admin
```

----------------------------------------

TITLE: Install Google Cloud Retail Python Client on Windows
DESCRIPTION: This snippet provides shell commands to install the Google Cloud Retail Python client library on Windows systems. It uses 'virtualenv' to create an isolated Python environment and then installs the library via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-retail/docs/README.rst#_snippet_1

LANGUAGE: shell
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-retail
```

----------------------------------------

TITLE: Install Google Cloud Speech Library on Windows
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Speech Python client library on Windows systems. It outlines the steps to create and activate a Python virtual environment, followed by installing the library using pip, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-speech
```

----------------------------------------

TITLE: Enable Default Logging for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to "google". This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default structured logging handler for all Google-based Python loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-reservation/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications. This provides a quick way to get basic logging output without modifying code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` to capture detailed logs.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Python Library Logging Programmatically
DESCRIPTION: Demonstrates how to programmatically configure logging for all Google-based Python libraries. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgenetwork/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Handler for All Google Loggers (Python Code)
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler for the root 'google' logger, setting its level to DEBUG to capture all Google-based logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis-cluster/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Secret Manager on Windows
DESCRIPTION: Instructions to install the Google Cloud Secret Manager Python client library on Windows systems using a virtual environment. This helps manage project-specific dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-secret-manager
```

----------------------------------------

TITLE: Update google-cloud-dialogflow package installation and import path
DESCRIPTION: This snippet demonstrates the breaking change in package naming and import paths for the `google-cloud-dialogflow` library. Previously, the package was `dialogflow`; now it is `google-cloud-dialogflow`. Existing installations and import statements must be updated accordingly.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/UPGRADING.md#_snippet_0

LANGUAGE: sh
CODE:
```
python3 -m pip install dialogflow
```

LANGUAGE: python
CODE:
```
import dialogflow
```

LANGUAGE: sh
CODE:
```
python3 -m pip install google-cloud-dialogflow
```

LANGUAGE: python
CODE:
```
from google.cloud import dialogflow
```

----------------------------------------

TITLE: Install Google Cloud Text-to-Speech Python Library
DESCRIPTION: Provides commands to install the `google-cloud-texttospeech` client library within a Python virtual environment using `venv` and `pip` for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-texttospeech/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-texttospeech
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-texttospeech
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Python Code)
DESCRIPTION: This Python snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datalabeling/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Cloud Python Library (Environment)
DESCRIPTION: This example shows how to enable the default structured logging handler for a particular Google Cloud Python client library (e.g., 'library_v1') using an environment variable. This scopes logging to a specific module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-security/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Python Logging Handler for Specific Google Module
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific Google Cloud module, `google.cloud.library_v1`, and set its logging level to `DEBUG`. This allows fine-grained control over logging for individual client libraries, enabling focused debugging for specific components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-reviews/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Cloud Python Module (Environment)
DESCRIPTION: This snippet demonstrates how to enable default structured logging for a particular Google Cloud Python client library (e.g., library_v1) by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to its full module path. This allows targeted logging configuration without altering application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientconnectorservices/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Specific Google Module Logging via Environment Variable
DESCRIPTION: To enable default structured logging for a particular Google Cloud Python client library, set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's specific scope, such as `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datacatalog-lineage/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Custom Logging Handler for a Specific Google Cloud Python Module in Python
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a custom logging handler for a specific Google Cloud Python client library module (e.g., 'google.cloud.library_v1'). It retrieves the module's logger, adds a StreamHandler, and sets its level to DEBUG for granular control over logging output. By default, these logs will not propagate to the root logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Admin API v1alpha: AccessBinding and ExpandedDataSet Management
DESCRIPTION: Introduces several new resource types including `AccessBinding`, `ExpandedDataSet`, and related filter types. Provides comprehensive CRUD and batch operations for `AccessBinding` and standard CRUD operations for `ExpandedDataSet`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-admin/docs/CHANGELOG.md#_snippet_31

LANGUAGE: APIDOC
CODE:
```
Resource Types Added:
  AccessBinding
  ExpandedDataSet
  ExpandedDataSetFilter
  ExpandedDataSetFilterExpression
  ExpandedDataSetFilterExpressionList

Methods for AccessBinding:
  CreateAccessBinding()
  GetAccessBinding()
  UpdateAccessBinding()
  DeleteAccessBinding()
  ListAccessBindings()
  BatchCreateAccessBindings()
  BatchGetAccessBindings()
  BatchUpdateAccessBindings()
  BatchDeleteAccessBindings()

Methods for ExpandedDataSet:
  GetExpandedDataSet()
  ListExpandedDataSets()
  CreateExpandedDataSet()
  UpdateExpandedDataSet()
  DeleteExpandedDataSet()
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python)
DESCRIPTION: Shows how to configure a stream handler and set the logging level to DEBUG for a specific Google Cloud Python client library, such as 'library_v1', using Python's standard 'logging' mechanism. This allows targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-biglake/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Cloud Python Library (Code)
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a StreamHandler for a specific Google Cloud Python client library's logger (e.g., 'google.cloud.library_v1'), setting its level to DEBUG. This provides fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Module Logging Programmatically in Python
DESCRIPTION: Programmatically configure logging for a specific Google Cloud Python client library by getting its logger (e.g., `google.cloud.library_v1`), adding a stream handler, and setting the desired logging level.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datacatalog-lineage/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for the top-level 'google' logger, setting its level to DEBUG. This ensures all Google-based logging events are processed and emitted.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-language/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Custom Logging Handler for All Google Python Modules in Code
DESCRIPTION: Demonstrates how to programmatically configure a logging handler for the entire `google` namespace using Python's standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Environment-Based Logging for a Specific Google Python Module
DESCRIPTION: Shows how to enable default structured logging for a specific Google Cloud Python client library (e.g., 'library_v1') by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its full scope. This allows targeted environment-based logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module (Python)
DESCRIPTION: Shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library's logger, such as `google.cloud.library_v1`, using Python's standard `logging` mechanism. This allows for module-specific logging configuration directly within the application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommendations-ai/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module (Code)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for a specific Google Cloud Python client library (e.g., library_v1) using the standard 'logging' module. It retrieves the logger for the specified module, attaches a StreamHandler, and sets its level to DEBUG for detailed logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientconnectorservices/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logger for Specific Google Module
DESCRIPTION: This Python snippet demonstrates how to configure logging for a specific Google Cloud Python module, such as 'google.cloud.library_v1', using the standard 'logging' library. It obtains the module-specific logger, attaches a StreamHandler, and sets its level to DEBUG. This allows for targeted and customized logging configurations for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-notebooks/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: This Python snippet demonstrates how to configure a `StreamHandler` for a specific Google Cloud Python module, such as `google.cloud.library_v1`, using the standard `logging` module. It targets the module's logger, adds a `StreamHandler` to stream log messages, and sets its level to `DEBUG`, enabling module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: Programmatically configure a stream handler for a specific Google client library's logger, such as `google.cloud.library_v1`, using Python's `logging` module. This allows for targeted logging setup for individual libraries, setting the log level to `DEBUG` and directing output to a stream.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python example illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets its level to `DEBUG` for detailed logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgecontainer/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using Python's standard `logging` module. It sets up a `StreamHandler` and `DEBUG` level for the 'google' logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-videointelligence/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python code demonstrates how to programmatically configure a StreamHandler for the 'google' logger and set its level to DEBUG. This method provides explicit control over logging for all Google-based modules, allowing for custom handlers and levels.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing-budgets/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python code demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-netapp/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Deploy Python Client on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-deploy` library on Windows systems. It ensures dependencies are isolated from system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-deploy/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-deploy
```

----------------------------------------

TITLE: Install Google Cloud Text-to-Speech Python Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-texttospeech` library on Mac/Linux operating systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-texttospeech/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-texttospeech
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Code-Based)
DESCRIPTION: This Python example demonstrates how to configure a logging handler for a specific Google module, such as 'google.cloud.library_v1', using Python's `logging` module. It adds a `StreamHandler` and sets the log level to `DEBUG` for the targeted module's logger, allowing precise control over its logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-containeranalysis/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Cloud Python Module
DESCRIPTION: This Python example demonstrates how to configure logging specifically for a particular Google Cloud Python module, such as 'google.cloud.library_v1'. It retrieves the module's logger, attaches a StreamHandler, and sets its level to DEBUG, allowing for module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Programmatically
DESCRIPTION: Configure a `StreamHandler` for a specific Google module's logger, such as `google.cloud.library_v1`, using Python's `logging` module to manage its logging events independently.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python client library module, such as `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler`, and sets its level to `DEBUG` for detailed logging specific to that module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-translate/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module (Python)
DESCRIPTION: Illustrates how to set up a `StreamHandler` and `DEBUG` level logging for a specific Google Cloud client library's logger, such as `google.cloud.library_v1`, using Python's `logging` module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb-connectors/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Add DataStream Management Operations
DESCRIPTION: Introduces new API operations for managing `DataStream` resources, including creation, deletion, update, and listing functionalities.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-admin/docs/CHANGELOG.md#_snippet_35

LANGUAGE: APIDOC
CODE:
```
DataStream Resource Operations:
  - CreateDataStream()
  - DeleteDataStream()
  - UpdateDataStream()
  - ListDataStreams()
```

----------------------------------------

TITLE: Enhance GKE Cluster Stack Type Configuration
DESCRIPTION: Expands support for specifying network stack type for GKE clusters, enabling creation as dual-stack or dynamic toggling between IPv4 and dual-stack.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/CHANGELOG.md#_snippet_110

LANGUAGE: APIDOC
CODE:
```
API Update: Cluster configuration for network stack type (IPv4, dual stack) enhanced for creation and toggling.
```

----------------------------------------

TITLE: Add API to List Databases by Project and Location
DESCRIPTION: Implements a new API to retrieve a list of databases, allowing filtering by project and specific geographical location.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/docs/CHANGELOG.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
add new API to list the databases in a project and location
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-netapp/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable default logging for all Google Python modules via environment variable
DESCRIPTION: Set the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google' to activate default structured logging for all Google-based Python modules at DEBUG level or higher without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Structured Logging for All Google Cloud Python Libraries (Environment Variable)
DESCRIPTION: Configure the default structured logging handler for all Google-based loggers in Google Cloud Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables basic logging for the entire SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recaptcha-enterprise/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google module's logger, such as `google.cloud.library_v1`. This enables fine-grained control over logging for individual client libraries directly within your application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific Google module's logger, `google.cloud.library_v1`, and set its level to `DEBUG`. This allows fine-grained control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-admanager/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Cloud Python Loggers
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages to the console, and sets the logging level to `DEBUG` for comprehensive logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-marketingplatform-admin/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all loggers under the `google` namespace. It retrieves the `google` logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, ensuring detailed logging for all Google-related operations within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-admin/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a quick way to capture logging messages from all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-config/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-notifications/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud BigQuery Migration Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-bigquery-migration` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-migration/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bigquery-migration
```

----------------------------------------

TITLE: Install Google Cloud Private Catalog Python Client on Mac/Linux
DESCRIPTION: This snippet provides the console commands to set up a Python virtual environment using `venv` and install the `google-cloud-private-catalog` library on Mac or Linux operating systems. It ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-catalog/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-private-catalog
```

----------------------------------------

TITLE: Install Google Cloud Transcoder Python Library on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-video-transcoder` client library on Windows systems. It ensures isolated project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-transcoder/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-video-transcoder
```

----------------------------------------

TITLE: Install Google Maps Places Python Client on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-maps-places` client library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-places/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-maps-places
```

----------------------------------------

TITLE: Install Google Cloud Gemini Data Analytics Library on Windows
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-geminidataanalytics` library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-geminidataanalytics
```

----------------------------------------

TITLE: Install Google Merchant API Python Client on Windows
DESCRIPTION: This snippet demonstrates how to create a Python virtual environment and install the `google-shopping-merchant-notifications` library on Windows using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-notifications/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-shopping-merchant-notifications
```

----------------------------------------

TITLE: Install Google Cloud Service Health Library on Windows
DESCRIPTION: This snippet provides the console commands to set up a virtual environment and install the `google-cloud-servicehealth` Python client library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-servicehealth
```

----------------------------------------

TITLE: Install Google Cloud Compute Library on Windows
DESCRIPTION: Instructions to install the google-cloud-compute Python library on Windows systems. It uses 'venv' to create an isolated Python environment, activates it, and then installs the library using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-compute
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module (Python Code)
DESCRIPTION: This Python code snippet shows how to programmatically configure a logging handler for a specific Google Cloud client library (e.g., `google.cloud.library_v1`). It obtains the module-specific logger, attaches a `StreamHandler` to direct logs to the console, and sets its level to `DEBUG`. If both code-based and environment-based configurations are used for the same module, the code-based configuration will take precedence if applied first.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Loggers Programmatically
DESCRIPTION: Set up a `StreamHandler` and `DEBUG` logging level for all loggers under the `google` namespace using Python's standard `logging` module. This provides fine-grained control over logging behavior for all Google-based loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-chronicle/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Loggers
DESCRIPTION: Programmatically configure a logging handler for all Google-based loggers. This Python snippet gets the 'google' logger, adds a StreamHandler, and sets its level to DEBUG to capture all relevant events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-org-policy/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Cloud Python Module in Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a StreamHandler for a specific Google Cloud Python client library module (e.g., 'library_v1'). It gets the logger for 'google.cloud.library_v1', adds a StreamHandler, and sets its level to DEBUG, allowing targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-telcoautomation/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure StreamHandler for a specific Google Python module programmatically
DESCRIPTION: Use Python's standard 'logging' mechanism to get a specific module's logger, like 'google.cloud.library_v1', add a StreamHandler to it, and set its level to DEBUG for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-configdelivery/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Using Python Code
DESCRIPTION: This Python example shows how to configure a stream handler and set the logging level (DEBUG) for a specific Google Cloud client library (e.g., 'library_v1') using the standard 'logging' module. It targets the specific logger scope for fine-grained control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-solar/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Accessing Enums and Types in google-cloud-trace
DESCRIPTION: Shows the updated way to access enums and types like `TraceSpan`. The unversioned `trace.types` submodule is no longer available; users must now access types via the versioned client, e.g., `trace_v1.TraceSpan()` or `trace_v1.types.TraceSpan()`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-trace/UPGRADING.md#_snippet_6

LANGUAGE: python
CODE:
```
from google.cloud import trace

trace_ = trace.types.TraceSpan()
```

LANGUAGE: python
CODE:
```
from google.cloud import trace_v1

trace_ = trace_v1.TraceSpan()
trace_ = trace_v1.types.TraceSpan()
```

----------------------------------------

TITLE: Google Cloud Python Client Thread and Multiprocessing Best Practices
DESCRIPTION: This note outlines the thread-safety of Google Cloud Python client instances, which stems from their reliance on the `grpc` library. It also specifies the recommended practice for creating client instances in multiprocessing environments, advising creation after `os.fork` to ensure proper behavior with `multiprocessing.pool.Pool` or `multiprocessing.Process`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-scheduler/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Google Cloud Python Client Thread/Multiprocessing Safety:
  Thread Safety:
    - Instances are safe to share across threads due to `grpc` library usage.
  Multiprocessing Best Practice:
    - Create client instances *after* `os.fork` invocation.
    - Relevant modules: `multiprocessing.pool.Pool`, `multiprocessing.Process`.
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google-Based Loggers
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a `StreamHandler` for the base 'google' logger. It sets the logging level to `DEBUG` and directs all Google-based logging events to the console. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-events-subscriptions/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Python Module (Environment)
DESCRIPTION: Sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to enable the default logging handler for a specific Google Cloud Python client library, such as `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This snippet shows how to enable the default logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`, by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This allows for targeted logging configuration for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-area120-tables/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Cloud Python Library
DESCRIPTION: This Python example demonstrates how to programmatically configure logging for a specific Google Cloud Python client library, such as `library_v1`. It obtains the logger for `google.cloud.library_v1`, adds a `StreamHandler` to direct logs to the console, and sets its logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parametermanager/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Programmatically
DESCRIPTION: Shows how to programmatically configure logging for a specific Google Python client library, such as 'google.cloud.library_v1'. It obtains the module-specific logger, attaches a StreamHandler, and sets its level to DEBUG, enabling targeted logging for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Library Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`). It retrieves the logger for `google.cloud.library_v1`, attaches a `StreamHandler`, and sets its level to `DEBUG`, allowing module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-support/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the base `google` logger, setting its level to `DEBUG`. This ensures that all logging events from Google-based Python libraries are handled and emitted to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storagebatchoperations/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging for All Modules Programmatically
DESCRIPTION: Set up a `StreamHandler` and `DEBUG` level for all Google-based Python loggers using Python's standard `logging` module, ensuring structured output to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gsuiteaddons/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: Illustrates how to set up a `StreamHandler` and `DEBUG` level for the base "google" logger using Python's standard `logging` module. This method provides fine-grained control over logging configuration for all Google-based loggers within your application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-developerconnect/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers Using Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It sets up a StreamHandler to output log messages to the console at DEBUG level or higher, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datatransfer/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a StreamHandler to output messages, and sets its level to DEBUG to capture all logging events from Google Cloud libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-confidentialcomputing/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers. It retrieves the 'google' logger instance and attaches a `StreamHandler` to direct log messages to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Loggers (Python)
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a StreamHandler to output logs to the console, and sets the logging level to DEBUG, providing fine-grained control over log output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries (Environment)
DESCRIPTION: This snippet shows how to enable default structured logging for all Google-based loggers in Python applications by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This configures logging at DEBUG level or higher without requiring code modifications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-clientconnectorservices/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Marketing Platform Admin API Python Client Library
DESCRIPTION: These snippets provide instructions for installing the Google Marketing Platform Admin API Python client library using a virtual environment on different operating systems (Mac/Linux and Windows).
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ads-marketingplatform-admin/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-ads-marketingplatform-admin
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-ads-marketingplatform-admin
```

----------------------------------------

TITLE: Install Google Cloud Vision AI Python Client on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the Google Cloud Vision AI client library on macOS or Linux systems using pip. It ensures project dependencies are isolated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-visionai
```

----------------------------------------

TITLE: Install Python Client for Shopping Merchant Quota on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a virtual environment and install the Google Shopping Merchant Quota client library on macOS or Linux systems. It ensures dependencies are isolated from other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-quota/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-shopping-merchant-quota
```

----------------------------------------

TITLE: Install Google Cloud Essential Contacts Library on Mac/Linux
DESCRIPTION: This snippet demonstrates how to set up a Python virtual environment and install the `google-cloud-essential-contacts` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-essential-contacts/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-essential-contacts
```

----------------------------------------

TITLE: Add secret_manager_stored_password field to OracleProfile
DESCRIPTION: Adds the `secret_manager_stored_password` field to the `OracleProfile` message, allowing passwords to be stored and retrieved securely via Secret Manager for Oracle connection profiles.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datastream/CHANGELOG.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Message: .google.cloud.datastream.v1.OracleProfile
  Field Added: secret_manager_stored_password
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger. This ensures all Google-based logging events are processed and outputted, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level 'google' logger, ensuring all Google-based logging events are processed.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-products/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Cloud Python Library
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud Python client library (e.g., `google.cloud.library_v1`). It obtains the logger for the specified module, attaches a `StreamHandler`, and sets its level to `DEBUG`, providing fine-grained control over logging for individual libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-catalog/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python example shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library's logger (e.g., `google.cloud.library_v1`), providing targeted logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-connect-gateway/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for a Specific Google Cloud Module
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python module's logger (e.g., `google.cloud.library_v1`). This provides fine-grained control over logging for individual client libraries, allowing for module-specific debugging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-login/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module in Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, like `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler` for console output, and sets its logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-area120-tables/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a broad logging configuration for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-domains/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: Use Python's standard `logging` mechanism to configure a handler for all Google-based loggers. This example sets a `StreamHandler` and `DEBUG` level for the 'google' logger, providing fine-grained control over logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG`. This ensures all logging events from Google-based loggers are processed and outputted to the console, providing detailed insights.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-workstations/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for a specific Google Cloud Python client library module (e.g., `google.cloud.library_v1`). It retrieves the module's logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG` for fine-grained control over log output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securesourcemanager/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default structured logging for all Google-based Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google'. This configures logging events at DEBUG level or higher, emitting messages in a structured format without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Run Python Client on Windows
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-run` library on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-run
```

----------------------------------------

TITLE: Artifact Registry API: Repository Resource & CreateRepository Request Field Updates
DESCRIPTION: Documents updates to the Artifact Registry API, marking `create_time` and `update_time` in the `Repository` resource as output-only. Additionally, the `repository_id` and `repository` fields in the `CreateRepository` request are now explicitly required.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-artifact-registry/docs/CHANGELOG.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Repository Resource:
  create_time: Output only field
  update_time: Output only field

CreateRepository Request:
  repository_id: Required field
  repository: Required field
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically
DESCRIPTION: Illustrates how to configure logging for Google Cloud Python libraries using Python's standard `logging` module. This allows for fine-grained control over handlers, levels, and propagation for specific Google loggers, providing more flexibility than environment-based configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library (e.g., `library_v1`) by getting its specific logger, adding a handler, and setting its level to `DEBUG`. This allows for module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-backupdr/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Using Python
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler`, and sets its logging level to `DEBUG` for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Programmatically (Python)
DESCRIPTION: This Python snippet illustrates how to programmatically set up a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Programmatically for a Specific Google Module
DESCRIPTION: Utilize Python's standard `logging` module to target a specific Google Cloud Python library's logger, such as `google.cloud.library_v1`, adding a `StreamHandler` and setting its level to `DEBUG` for granular logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python)
DESCRIPTION: Set up a custom logging handler for a specific Google Cloud Python client library module using Python's standard `logging` module. This example targets the 'google.cloud.library_v1' logger, directing logs to a stream and setting the level to DEBUG.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-functions/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Cloud Python Module Logging with Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as 'google.cloud.library_v1'. It retrieves the module's logger, attaches a StreamHandler, and sets its logging level to DEBUG for detailed output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-issueresolution/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Programmatically
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud Python client library, `google.cloud.library_v1`, using the standard `logging` mechanism. It retrieves the module's logger, adds a `StreamHandler` to output logs, and sets the logging level to `DEBUG` for detailed output specific to that module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-managed-identities/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google client library, such as `google.cloud.library_v1`. It retrieves the module-specific logger, attaches a `StreamHandler`, and sets its level to `DEBUG` for granular control over logging output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default structured logging for all Google-based Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures `logging.DEBUG` level events without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-ai-generativelanguage/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Global Google Cloud Python Logging via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable default logging handlers for all Google-based loggers across your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-reports/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers (Code)
DESCRIPTION: Demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the base `google` logger using Python's standard `logging` module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python example illustrates how to programmatically configure logging for all loggers under the `google` namespace. It sets up a `StreamHandler` to output debug-level messages to the console, providing fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-assured-workloads/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: Demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard `logging` mechanism. This provides more granular control over logging behavior than environment variables.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gdchardwaremanagement/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG` to capture all events. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-support/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger, affecting all Google-based loggers.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-metrics-scopes/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python snippet illustrates how to programmatically configure a `StreamHandler` for the base 'google' logger. It sets the logger's level to `DEBUG` and adds a `StreamHandler` to capture all logging events from any Google-based library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bare-metal-solution/docs/README.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the base 'google' logger, setting its level to `DEBUG` to capture all logging events from Google-based modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment Variable)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications. This is a simple way to quickly enable basic logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This example demonstrates how to enable default structured logging for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google'. This configures handling of logging events at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appgateways/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Python: Configure Logging Handler for a Specific Google Cloud Python Module
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as 'google.cloud.library_v1'. It adds a StreamHandler and sets the logging level to DEBUG for targeted debugging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module (Code-Based)
DESCRIPTION: This Python code snippet shows how to configure a stream handler and set the logging level to DEBUG for a specific Google client library module, such as `google.cloud.library_v1`, using Python's standard `logging` mechanism.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-compute-v1beta/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically
DESCRIPTION: Illustrates how to configure logging for Google Cloud Python libraries directly within Python code using the standard `logging` module. Examples show how to set up a `StreamHandler` and `DEBUG` level for either all Google-based loggers or a specific client library module like `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-meet/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries (Code)
DESCRIPTION: This Python snippet illustrates how to programmatically configure logging for all Google-based loggers using the standard 'logging' module. It sets up a StreamHandler and defines the logging level.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policy-troubleshooter/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path, such as `google.cloud.library_v1`. This enables the default logging handler exclusively for the designated Google Cloud client library, allowing for more granular control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-appengine-admin/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This example shows how to enable the default logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`, using the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This allows for targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-domains/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: Configure logging for a particular Google Cloud Python client library (e.g., 'library_v1') by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to its specific scope. This enables a default structured logging handler for DEBUG level events and higher for that module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-monitoring-dashboards/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This snippet shows how to enable default structured logging specifically for a particular Google Cloud Python client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its specific scope, such as `google.cloud.library_v1`. This allows targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-financialservices/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a StreamHandler for a specific Google Cloud Python client library's logger (e.g., 'google.cloud.library_v1') and set its level to DEBUG. This allows for targeted logging configuration for individual modules within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing-budgets/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for Specific Google Module
DESCRIPTION: This Python code configures a `StreamHandler` for a specific Google Cloud client library's logger, such as `google.cloud.library_v1`. It sets the logging level to `DEBUG`, allowing for precise control over logging for individual modules within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-documentai/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for All Google Modules via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This ensures that logging events from any Google Cloud Python library are captured.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-common/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in the Python SDK. This configuration is applied when any client library is first instantiated.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: Configure the default structured logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables logging for all Google Cloud Python libraries at `DEBUG` level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-migration/README.rst#_snippet_2

LANGUAGE: Shell
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python applications. This is a simple way to get basic logging output for all Google Cloud client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-biglake/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Cloud Python Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers in Google Cloud Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures logging events at `DEBUG` level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-securitycentermanagement/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Environment-Based Logging for All Google Python Libraries
DESCRIPTION: Demonstrates how to enable default structured logging for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures handling of logging events at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Console: Enable Logging for All Google Modules
DESCRIPTION: This snippet demonstrates how to enable default logging handlers for all Google-based Python loggers by setting an environment variable. This configuration applies broadly to any Google Cloud Python library used in the environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable a default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a quick way to activate basic logging across all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-billing/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python SDKs.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger, ensuring all Google-based loggers output messages to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-resource-manager/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` for a specific logger, such as 'google.cloud.library_v1', and set its level to `DEBUG`. This method is useful for isolating logging configurations to particular client libraries, enabling detailed debugging for specific components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-promotions/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Modules (Python)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the top-level `google` logger, ensuring all Google-based logging events are handled.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-notifications/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud module's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`. This allows fine-grained control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Logging Handler in Python
DESCRIPTION: Illustrates how to programmatically configure a logging handler for all Google-based loggers using Python's standard 'logging' module. It sets up a StreamHandler for the 'google' logger and sets its level to DEBUG.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-places/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable/Disable Secret Manager CSI Component on GKE Clusters via API
DESCRIPTION: Adds API functionality to programmatically enable or disable the Secret Manager CSI component on Google Kubernetes Engine (GKE) clusters. This enhancement provides greater control over secret management integration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/docs/CHANGELOG.md#_snippet_32

LANGUAGE: APIDOC
CODE:
```
google.container.v1.GKEClusterAPI:
  Methods/Fields:
    enableSecretManagerCSIComponent: boolean
    disableSecretManagerCSIComponent: boolean
    Description: API to enable/disable the Secret Manager CSI component on GKE clusters.
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a stream handler and set the logging level to DEBUG for a specific Google Cloud Python client library (e.g., 'library_v1'). This method provides precise control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parallelstore/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud client library's logger (e.g., `google.cloud.library_v1`), allowing fine-grained logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-secret-manager/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python example shows how to programmatically configure a logging handler for a specific Google Cloud Python client library module (e.g., `google.cloud.library_v1`). It retrieves the module's logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers in Python
DESCRIPTION: Programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for all loggers under the `google` namespace. This Python example demonstrates advanced, code-based control over logging for Google Cloud libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python Code
DESCRIPTION: This Python snippet illustrates how to programmatically configure a logging handler for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`, providing fine-grained control over logging behavior directly within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-geo-type/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enabling default handler for a specific Google module via environment variable
DESCRIPTION: This example demonstrates how to enable the default logging handler for a specific Google client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its full scope, such as `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-webrisk/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Cloud Python Module via Environment Variable
DESCRIPTION: This example shows how to enable the default structured logging handler for a specific Google Cloud Python module, such as 'google.cloud.library_v1', by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable. This allows for targeted logging configuration for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policytroubleshooter-iam/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path like `google.cloud.library_v1`. This enables the default logging handler only for that particular Google client library, allowing for more granular control over environment-based logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-speech/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically with Python
DESCRIPTION: These Python code examples show how to configure logging handlers and levels using Python's standard 'logging' mechanism. You can apply this configuration to all Google-based loggers or target a specific Google Cloud client library module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/docs/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Global Google Logging via Environment Variable
DESCRIPTION: Sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to activate the default logging handler for all Google-based loggers across Python applications. This provides a quick way to enable basic logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all loggers within the `google` namespace in Google Cloud Python libraries. This is a simple way to activate basic logging across the entire SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Handler for All Google Loggers via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable the default logging handler for all Google-based loggers in Python applications. This is an environment-based configuration method.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Environment-Based Logging for All Google Python Loggers
DESCRIPTION: Configure logging for all Google-based Python modules by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables a default structured logging handler for `DEBUG` level events and higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-phishing-protection/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module
DESCRIPTION: Provides methods to enable and configure logging for a particular Google Cloud client library module, either via environment variables or directly in Python code. This allows for fine-grained control over logging for specific components of your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-access-approval/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries (Environment Variable)
DESCRIPTION: This snippet shows how to enable the default structured logging handler for all Google-based Python loggers. Setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` activates this behavior across all relevant libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-inventories/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Loggers (Console)
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This configures the library to handle logging events for any module within the 'google' namespace.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install BeyondCorp AppConnectors Python Client
DESCRIPTION: Instructions to install the BeyondCorp AppConnectors Python client library using `pip` within a virtual environment. Commands are provided for both Mac/Linux and Windows operating systems to ensure proper dependency isolation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnectors/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-beyondcorp-appconnectors
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-beyondcorp-appconnectors
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This configures logging for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storagebatchoperations/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Specific Google Cloud Python Module Logging with Python Code
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud module's logger, such as `google.cloud.library_v1`, and set its level to `DEBUG`. This allows precise control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Programmatically
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python module's logger (e.g., `google.cloud.library_v1`), setting its level to `DEBUG`. This allows fine-grained control over logging for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bare-metal-solution/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Enterprise Knowledge Graph Python Client on Windows
DESCRIPTION: This snippet provides the commands to set up a Python virtual environment and install the `google-cloud-enterpriseknowledgegraph` library on Windows. It ensures an isolated environment for project dependencies, avoiding conflicts with other Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-enterpriseknowledgegraph/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-enterpriseknowledgegraph
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging Programmatically
DESCRIPTION: Illustrates how to configure logging for Google Cloud Python libraries directly within Python code using the standard `logging` module. This approach allows for more granular control, such as setting custom handlers and logging levels for all Google-based loggers or specific modules. By default, logging events are not propagated to the root logger unless explicitly set via `logging.getLogger("google").propagate = True`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contentwarehouse/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Python Module Logging Programmatically
DESCRIPTION: Illustrates how to programmatically configure logging for a specific Google Python module, such as `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler`, and sets its logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgenetwork/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging: Set Up Handler for Specific Google Module in Python
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud client library module (e.g., `google.cloud.library_v1`). It retrieves the module's logger, adds a `StreamHandler` for console output, and sets its level to `logging.DEBUG` for comprehensive logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module's namespace, such as `google.cloud.library_v1`, to enable default structured logging only for that particular Google Cloud Python client library. This provides granular control over which modules emit structured logs.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module (Environment Variable)
DESCRIPTION: Configure the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable with a specific module scope, such as 'google.cloud.library_v1', to enable default structured logging for that particular Google Python client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Specific Google Module Logging in Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, enabling precise, code-based logging control for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-audit-log/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module (Code-Based)
DESCRIPTION: This Python snippet demonstrates configuring a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`) programmatically. It targets the module's specific logger, adding a `StreamHandler` and setting its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-inventories/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Loggers via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable the default logging handler for all Google-based loggers in Python applications.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-run/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Loggers via Environment Variable
DESCRIPTION: This snippet shows how to enable default structured logging for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This method allows for quick, code-free activation of basic logging for the entire Google SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-routeoptimization/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based Python loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configuration ensures that logging events from any Google Cloud Python library are captured and processed by the default handler.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-meet/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers within the Python SDK.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vmwareengine/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Dataplex Python Library
DESCRIPTION: Instructions to install the `google-cloud-dataplex` Python client library using a virtual environment (`venv`) to isolate project dependencies. Commands are provided for both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataplex/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-dataplex
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dataplex
```

----------------------------------------

TITLE: Install Google Workspace Add-ons Python Client on Windows
DESCRIPTION: This snippet demonstrates how to create a Python virtual environment and install the `google-cloud-gsuiteaddons` library on Windows using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gsuiteaddons/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-gsuiteaddons
```

----------------------------------------

TITLE: Install Python Client for Oracle Database@Google Cloud on Windows
DESCRIPTION: This snippet provides the console commands to set up a virtual environment and install the `google-cloud-oracledatabase` Python client library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-oracledatabase/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-oracledatabase
```

----------------------------------------

TITLE: Install Google Cloud Source Context Library on Windows
DESCRIPTION: This snippet provides commands to install the Google Cloud Source Context Python client library on Windows systems using a virtual environment. It creates a venv, activates it, and then installs the package via pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-source-context/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-source-context
```

----------------------------------------

TITLE: Install Google Cloud Network Management Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-network-management` library on Windows. It ensures isolated dependencies for your project by creating a dedicated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-management/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-network-management
```

----------------------------------------

TITLE: Install reCAPTCHA Enterprise Client Library on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-recaptcha-enterprise` library on Windows systems. Using a virtual environment ensures isolated project dependencies and avoids conflicts with system-wide Python installations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recaptcha-enterprise/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-recaptcha-enterprise
```

----------------------------------------

TITLE: Configure Logging Handler for All Google-based Loggers using Python
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using the standard `logging` module. It gets the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`, providing fine-grained control over logging output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow-cx/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a logging handler for all loggers under the `google` namespace. It retrieves the base 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for comprehensive output.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module (Code-Based)
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python module's logger (e.g., `google.cloud.library_v1`), allowing fine-grained control over logging for individual libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memorystore/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to configure a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`) using the standard `logging` module. It targets the specific module's logger, adds a `StreamHandler`, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-recommender/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Grafeas Python Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the Grafeas client library on Windows. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install grafeas
```

----------------------------------------

TITLE: Install Google Cloud Data Fusion Client on Windows
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-data-fusion` client library on Windows systems. Using a virtual environment helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-fusion/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-data-fusion
```

----------------------------------------

TITLE: Install Google Cloud Storage Transfer Library on Windows
DESCRIPTION: Installs the Google Cloud Storage Transfer client library in a virtual environment on Windows systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-transfer/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-storage-transfer
```

----------------------------------------

TITLE: Add Context Manager Support to Analytics Data Client (Python)
DESCRIPTION: Enables context manager protocol support for the Analytics Data client, allowing it to be used with Python's `with` statement for automatic resource management and cleanup.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-data/docs/CHANGELOG.md#_snippet_21

LANGUAGE: Python
CODE:
```
from google.analytics.data_v1beta import AnalyticsDataClient

with AnalyticsDataClient() as client:
    # Perform operations with the client
    pass
```

----------------------------------------

TITLE: Configure Logging Scope for All Google Modules via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable default structured logging for all Google-based loggers in Python client libraries. This provides a quick way to get basic logging without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Global Google Logging via Environment Variable
DESCRIPTION: This snippet demonstrates how to activate default logging handlers for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This method provides a broad, system-wide logging configuration for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-audit-log/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries (Environment Variable)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling default structured logging for all Google-based loggers at `DEBUG` level or higher. This method requires no code changes and is suitable for quick setup.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-privilegedaccessmanager/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries (Environment)
DESCRIPTION: Configures the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to enable the default logging handler for all loggers under the `google` namespace.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-keys/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries (Environment Variable)
DESCRIPTION: Set the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google' to enable default structured logging for all Google-based loggers in Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python client libraries. This provides a broad logging configuration without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Loggers via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides a quick and easy way to configure structured logging for all Google Cloud Python libraries within your application's environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-transfer/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Python Logging for All Google Modules Programmatically
DESCRIPTION: Use Python's standard `logging` module to programmatically configure a `StreamHandler` for the root 'google' logger. This example sets the logging level to `DEBUG`, ensuring all debug-level events from any Google-based module are processed and emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-orchestration-airflow/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: gRPC Client Instance Sharing and Multiprocessing Best Practices
DESCRIPTION: Explains the inherent thread-safety of gRPC-based Python client instances and details the recommended approach for creating these instances within multiprocessing contexts, emphasizing the timing relative to `os.fork`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-datapolicies/docs/multiprocessing.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Client Instance Sharing Guidelines:
  - **Thread Safety**: Because this client uses the `grpc` library, it is safe to share instances across threads.
  - **Multiprocessing Scenarios**: In multiprocessing scenarios, the best practice is to create client instances *after* the invocation of `os.fork`.
  - **Relevant Modules/Classes**: This applies to processes managed by `multiprocessing.pool.Pool` or `multiprocessing.Process`.
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging via Environment Variable (All Modules)
DESCRIPTION: This snippet demonstrates how to enable default logging for all Google-based loggers in the Google Cloud Python library by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This provides structured logging for `DEBUG` level events and higher without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-asset/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Global Google Logging via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This configures the library to log events from any Google module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-card/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable All Google Cloud Python Library Logging via Environment Variable
DESCRIPTION: Configure default structured logging for all Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables logging events at `DEBUG` level or higher without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-policysimulator/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Implement Context Manager Support in Client
DESCRIPTION: Enables the use of Python's context manager protocol (`with` statement) with the client, ensuring proper resource management and cleanup.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-talent/CHANGELOG.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Client:
  - Context manager support added.
  - Usage example: `with client.Client() as client:`
```

----------------------------------------

TITLE: Configure Logging for All Google Modules Using Python's Logging Module
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture all messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-connection/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Python Libraries
DESCRIPTION: Illustrates how to programmatically configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard `logging` mechanism. This provides advanced, code-based control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storage-control/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Grafeas Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the Grafeas client library on macOS and Linux. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install grafeas
```

----------------------------------------

TITLE: Install Google Cloud Memorystore Python Client on Windows
DESCRIPTION: Instructions to install the `google-cloud-memorystore` Python client library on Windows systems using `venv` for isolated environments. This method prevents conflicts with other Python projects.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-memorystore/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-memorystore
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Python Loggers Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for the root `google` logger. This approach provides fine-grained control over logging behavior for all Google Cloud Python client libraries within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-build/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers Programmatically in Python
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using Python's standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-card/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Modules
DESCRIPTION: This Python code configures a `StreamHandler` for the `google` logger, setting its level to `DEBUG`. This enables detailed logging for all Google-based loggers within the application, providing fine-grained control over log output directly in your code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-shell/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python module's logger, such as `google.cloud.library_v1`, and set its level to `DEBUG`. This allows fine-grained logging control for individual client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-css/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module (Python)
DESCRIPTION: This Python code snippet shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google module's logger (e.g., `google.cloud.library_v1`). This allows for fine-grained control over logging for individual client libraries, enabling targeted debugging or monitoring.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-vmwareengine/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Module Logger Programmatically in Python
DESCRIPTION: Shows how to configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google client library logger, such as `google.cloud.library_v1`, using Python's `logging` module. This allows for targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-deploy/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Dataproc Metastore Client on Windows
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-dataproc-metastore` library on Windows systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc-metastore/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-dataproc-metastore
```

----------------------------------------

TITLE: Install Google Cloud Data Labeling Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-datalabeling` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datalabeling/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-datalabeling
```

----------------------------------------

TITLE: Install Google Cloud Developer Connect Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-developerconnect` library on Mac/Linux systems, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-developerconnect/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-developerconnect
```

----------------------------------------

TITLE: Configure Logging Handler for Specific Google Module in Python
DESCRIPTION: This example demonstrates how to configure a logging handler for a specific Google Cloud Python module, such as "google.cloud.library_v1", using Python's logging module. It sets up a StreamHandler and defines the logging level for that particular module's logger.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-data-qna/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Python Loggers Programmatically
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a logging handler for all Google-based loggers using the standard `logging` module. It retrieves the 'google' logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-resource-manager/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure All Google Loggers via Environment Variable
DESCRIPTION: Demonstrates how to enable the default logging handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This provides a quick way to get structured logging for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-datalabeling/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers Programmatically
DESCRIPTION: This Python snippet illustrates how to configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG`. This allows programmatic control over logging for all Google-based Python client libraries, emitting messages to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-storageinsights/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud Optimization on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a virtual environment and install the `google-cloud-optimization` Python library on macOS or Linux systems, ensuring isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-optimization/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-optimization
```

----------------------------------------

TITLE: Configure Stream Handler for a Specific Google Module Logger in Python
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud client library module, such as `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler` to direct logs to the console, and sets the logging level to `DEBUG`, enabling detailed logging for that particular library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-os-config/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Stream Handler for All Google Loggers in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a `StreamHandler` for the root 'google' logger. It retrieves the logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for comprehensive logging across all Google-based modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-places/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Using Python Code
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a logging handler for a specific Google Cloud Python module, such as `google.cloud.library_v1`. It retrieves the module's logger, attaches a `StreamHandler`, and sets the logging level to `DEBUG`, allowing targeted logging configuration for individual libraries within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-geo-type/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: Configure the default structured logging handler for all Google-based Python libraries by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This enables logging events from all Google modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-binary-authorization/README.rst#_snippet_1

LANGUAGE: Shell
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Logging for Google Cloud Python Libraries via Environment Variable
DESCRIPTION: Demonstrates how to enable default logging handlers for Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This method allows configuring logging for all Google-based loggers or specific modules without requiring code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appgateways/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Modules via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default logging handler for all Google-based loggers in Python client libraries. This is a simple way to activate basic logging across your Google Cloud Python application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-shell/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Google Cloud Python Logging via Environment Variables
DESCRIPTION: These examples demonstrate how to enable the default logging handler for Google Cloud Python libraries by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable. This allows configuring logging for all Google-based loggers or a specific module.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment)
DESCRIPTION: This example shows how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to 'google'. This provides a simple, environment-based configuration without code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-containeranalysis/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Transcoder Client Library on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment and install the `google-cloud-video-transcoder` library on Mac or Linux systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-transcoder/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-video-transcoder
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for the root 'google' logger, setting its level to `DEBUG` to capture all Google-based logging events.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/googleapis-common-protos/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud KMS Inventory Library on Windows
DESCRIPTION: Instructions for installing the Google Cloud KMS Inventory Python client library on Windows systems using a virtual environment to manage dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms-inventory/README.rst#_snippet_1

LANGUAGE: Shell
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-kms-inventory
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Programmatically
DESCRIPTION: This Python example demonstrates how to programmatically configure a stream handler and set the logging level to `DEBUG` for all Google-based loggers. It uses Python's standard `logging` module to get the 'google' logger and attach a `StreamHandler`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-connectivity/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Cloud Python Libraries Using Python Code
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the top-level `google` logger, setting its level to `DEBUG`. This enables detailed logging for all Google-based loggers within the application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-private-ca/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Global Google Logging in Python Code
DESCRIPTION: This Python snippet shows how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to direct logs to standard output, and sets the logging level to `DEBUG`, offering granular control over global Google library logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-audit-log/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud.translate_v3 import translate

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Python Libraries via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This action enables the default structured logging handler for all Google-based loggers in Python applications, providing a quick way to activate library-wide debugging without code changes. It configures logging events at `DEBUG` level or higher, emitting them in a structured format.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-iam/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules (Environment Variable)
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`, enabling the default structured logging handler for all loggers within the `google` namespace. This provides a quick way to activate logging across all Google Cloud Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-contact-center-insights/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Environment-Based Logging for All Google Modules (Console)
DESCRIPTION: This snippet demonstrates how to enable default logging for all Google-based loggers in the Google Cloud Python library by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures the library to emit structured log messages at `DEBUG` level or higher without requiring code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-edgecontainer/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud API Gateway Python Library
DESCRIPTION: Instructions for installing the `google-cloud-api-gateway` Python client library in a virtual environment using `venv` and `pip` on various operating systems. This method isolates project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-api-gateway/README.rst#_snippet_0

LANGUAGE: Console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-api-gateway
```

LANGUAGE: Console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-api-gateway
```

----------------------------------------

TITLE: Install Google Cloud Bare Metal Solution Python Client
DESCRIPTION: These snippets provide instructions for installing the `google-cloud-bare-metal-solution` Python client library in a virtual environment using `venv` and `pip` on both Mac/Linux and Windows operating systems.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bare-metal-solution/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-bare-metal-solution
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-bare-metal-solution
```

----------------------------------------

TITLE: Install Google Geo Type Python Client Library
DESCRIPTION: Instructions to install the google-geo-type library in a virtual environment using pip for different operating systems. This method isolates project dependencies and avoids conflicts with system-wide packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-geo-type/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-geo-type
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-geo-type
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Cloud Python Module
DESCRIPTION: This Python snippet demonstrates how to configure a logging handler for a specific Google Cloud Python client library (e.g., `library_v1`) using Python's standard `logging` mechanism. It targets the specific module's logger, adds a `StreamHandler`, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers by getting the 'google' logger and adding a `StreamHandler`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-config/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Environment Variable for Specific Google Module Logging
DESCRIPTION: This snippet shows how to enable default logging for a specific Google Cloud Python module, such as 'google.cloud.library_v1', using the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable. This allows targeted structured logging for a particular library without modifying application code. Ensure the scope is valid, otherwise no handlers will be set up.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-notebooks/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install BeyondCorp AppConnectors Python Client on Mac/Linux
DESCRIPTION: This snippet provides commands to set up a Python virtual environment using `venv` and install the `google-cloud-beyondcorp-appconnectors` library on Mac or Linux. This ensures project dependencies are isolated from system-wide Python packages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnectors/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-beyondcorp-appconnectors
```

----------------------------------------

TITLE: Install Google Cloud Live Stream Library on Mac/Linux
DESCRIPTION: This snippet provides console commands to set up a Python virtual environment and install the `google-cloud-video-live-stream` library on macOS or Linux systems. Using a virtual environment helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-live-stream/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-video-live-stream
```

----------------------------------------

TITLE: Configure Logging Handler for All Google Cloud Python Loggers via Python Code
DESCRIPTION: This Python example demonstrates how to programmatically configure a `StreamHandler` for all Google-based loggers by getting the 'google' logger and setting its level to `DEBUG`. This provides fine-grained control over logging behavior within the application, allowing custom handlers and formats.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Scope via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default logging handlers for Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This method allows for broad logging across all Google modules or specific logging for a particular client library without requiring any code changes.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging Scope via Environment Variable
DESCRIPTION: Demonstrates how to enable default logging handlers for Google Cloud Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This method configures structured logging for a specified scope, such as all Google modules or a specific client library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-bigquery-migration/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install Google Cloud Scheduler Client on Windows
DESCRIPTION: Provides steps to install the Google Cloud Scheduler Python client library on Windows using `venv` for an isolated environment. This ensures dependencies are managed without system conflicts and avoids requiring system install permissions.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-scheduler/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-scheduler
```

----------------------------------------

TITLE: Configure Custom Logging Handler for All Google Modules in Python
DESCRIPTION: This Python code snippet illustrates how to programmatically configure a custom logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture all messages. This method offers fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-config/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud TPU Client Library on Mac/Linux
DESCRIPTION: Instructions to set up a Python virtual environment and install the google-cloud-tpu library on macOS or Linux systems using the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tpu/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-tpu
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Programmatically
DESCRIPTION: This Python example shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library's logger, such as `google.cloud.library_v1`. It sets the logger's level to `logging.DEBUG` for detailed, module-specific logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-cloudcontrolspartner/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Logging for All Google Modules via Environment Variable
DESCRIPTION: Demonstrates how to enable the default logging handler for all Google-based loggers in Python client libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-filestore/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable All Google Loggers via Environment Variable
DESCRIPTION: Configure the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google` to enable the default logging handler for all Google-based loggers in Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-visionai/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: This snippet demonstrates how to enable default logging for all Google Cloud Python libraries by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This configures structured logging for `DEBUG` level events and higher without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-videointelligence/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module, such as `google.cloud.library_v1`. This enables default logging for that particular Google client library, allowing targeted logging configuration without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-fleetengine-delivery/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for All Google Loggers via Environment Variable
DESCRIPTION: This example demonstrates how to enable the default structured logging handler for all loggers within the 'google' namespace by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This provides a quick way to activate library-wide logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-gke-backup/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This console command configures the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to target a specific Google Cloud client library, such as `google.cloud.library_v1`. This enables the default logging handler exclusively for that particular module, allowing for granular control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataflow-client/README.rst#_snippet_2

LANGUAGE: Console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This example demonstrates how to enable the default structured logging handler for a specific Google Cloud Python client library module (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`. This targets logging for a particular library.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging Handler for All Google Loggers via Environment Variable
DESCRIPTION: This console command sets an environment variable to enable the default structured logging handler for all loggers within the 'google' scope, capturing events at DEBUG level or higher.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-language/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries via Environment Variable
DESCRIPTION: This snippet shows how to enable default structured logging for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to 'google'. This provides a simple, code-free way to get basic logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module namespace, such as `google.cloud.library_v1`. This enables default structured logging only for the specified Google Python client library, allowing for more granular control over environment-based logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-websecurityscanner/docs/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for All Google Modules via Environment Variable
DESCRIPTION: Configures the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google`. This enables structured logging for all Google Cloud Python libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-productstudio/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Install Google Cloud Container Library
DESCRIPTION: These snippets provide commands to set up a Python virtual environment and install the `google-cloud-container` library on different operating systems (Mac/Linux and Windows). Using a virtual environment helps isolate project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-container/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-container
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-container
```

----------------------------------------

TITLE: Install Google Cloud Service Management Library on Windows
DESCRIPTION: Instructions to install the `google-cloud-service-management` Python library on Windows using `virtualenv` to create an isolated environment.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-service-management/docs/README.rst#_snippet_1

LANGUAGE: console
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-cloud-service-management
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure logging for a specific Google Cloud Python module (e.g., `google.cloud.library_v1`). It obtains the logger for the specific module, adds a `StreamHandler`, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataproc-metastore/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Python Logging Handler for All Google Loggers
DESCRIPTION: This Python code demonstrates how to programmatically configure a logging handler for all Google-based loggers. It retrieves the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` for comprehensive output. This provides fine-grained control over logging behavior.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library (e.g., `library_v1`) by getting its specific logger (`google.cloud.library_v1`), adding a handler, and setting its level to `DEBUG`. This allows targeted logging configuration for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-scheduler/docs/README.rst#_snippet_5

LANGUAGE: Python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Modules (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to configure a stream handler and set the logging level to DEBUG for all Google-based loggers using Python's standard `logging` mechanism.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-chat/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging
    
from google.cloud import library_v1
    
base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Add StreamingRawPredict to Dialogflow CX PredictionService
DESCRIPTION: Introduces the `StreamingRawPredict` method to the `PredictionService` in the Dialogflow CX API, enabling streaming raw prediction operations.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dialogflow-cx/CHANGELOG.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
PredictionService:
  - StreamingRawPredict()
```

----------------------------------------

TITLE: Add REST Interceptors for Metadata Reading (Python)
DESCRIPTION: Introduces new REST Interceptors in the Google Cloud Dataform Python client library, enabling the reading of metadata during API calls.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/CHANGELOG.md#_snippet_17

LANGUAGE: Python
CODE:
```
Feature: REST Interceptors
  Capability: Supports reading metadata.
```

----------------------------------------

TITLE: Add API for SQL Statement Execution
DESCRIPTION: Provides a new API endpoint to directly execute SQL statements, enabling programmatic database interaction.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-alloydb/docs/CHANGELOG.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
add new API to execute SQL statements
```

----------------------------------------

TITLE: Configure a logging handler for a specific Google module using Python code
DESCRIPTION: This Python snippet shows how to configure logging for a specific Google Cloud client library module, such as `google.cloud.library_v1`. It obtains the module-specific logger, attaches a `StreamHandler` for console output, and sets its level to `DEBUG`, allowing targeted logging configuration within your application.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parallelstore/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Cloud KMS Python Client Library
DESCRIPTION: This snippet provides commands to install the Google Cloud Key Management Service Python client library within a virtual environment on both Mac/Linux and Windows operating systems. It ensures isolated dependencies for your project.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-kms/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-kms
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-kms
```

----------------------------------------

TITLE: Install Google Cloud Tasks Python Client
DESCRIPTION: This snippet demonstrates how to install the Google Cloud Tasks Python client library using `venv` and `pip` on both Mac/Linux and Windows operating systems. It creates an isolated Python environment and installs the necessary package.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-tasks/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-tasks
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-tasks
```

----------------------------------------

TITLE: Install Google Cloud NetApp Python Client
DESCRIPTION: These snippets provide commands to set up a Python virtual environment and install the `google-cloud-netapp` library on different operating systems (Mac/Linux and Windows). Using a virtual environment ensures isolated project dependencies.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-netapp/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-netapp
```

LANGUAGE: console
CODE:
```
py -m venv <your-env>
.\<your-env>\Scripts\activate
pip install google-cloud-netapp
```

----------------------------------------

TITLE: Configure Code-Based Logging for a Specific Google Python Module
DESCRIPTION: This Python example demonstrates how to programmatically configure logging for a specific Google client library module (e.g., 'library_v1'). It obtains the logger for 'google.cloud.library_v1', adds a StreamHandler, and sets its level to DEBUG, allowing module-specific logging control.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-automl/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Using Python Code
DESCRIPTION: This Python example shows how to configure logging specifically for a client library like 'google.cloud.library_v1'. It retrieves the module's logger, attaches a StreamHandler, and sets its level to DEBUG, enabling precise logging setup for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-video-live-stream/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Module Logger Programmatically in Python
DESCRIPTION: This Python code snippet demonstrates how to configure a logging handler for a specific Google Cloud Python client library module (e.g., 'google.cloud.library_v1') using Python's standard 'logging' mechanism. It retrieves the module's logger, adds a StreamHandler, and sets the logging level to DEBUG for detailed logging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-texttospeech/docs/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module (Python Code)
DESCRIPTION: Shows how to programmatically configure a stream handler and set the logging level to DEBUG for a specific Google Cloud client library by targeting its specific logger instance (e.g., 'google.cloud.library_v1'). This allows for module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-devicestreaming/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Install Google Analytics Admin Python Client with virtualenv
DESCRIPTION: Instructions for installing the Google Analytics Admin Python client library within an isolated virtual environment using pip, detailing steps for both Mac/Linux and Windows operating systems to avoid dependency conflicts.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-analytics-admin/docs/README.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install virtualenv
virtualenv <your-env>
source <your-env>/bin/activate
<your-env>/bin/pip install google-analytics-admin
```

LANGUAGE: CMD
CODE:
```
pip install virtualenv
virtualenv <your-env>
<your-env>\Scripts\activate
<your-env>\Scripts\pip.exe install google-analytics-admin
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Module Using Python Code
DESCRIPTION: This Python code snippet shows how to programmatically configure logging for a specific Google Cloud Python client library module (e.g., `google.cloud.library_v1`). It retrieves the module's logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, allowing for module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-beyondcorp-appconnections/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Cloud Python Module (Python Code)
DESCRIPTION: This Python code snippet shows how to programmatically configure a `StreamHandler` for a specific Google Cloud Python client library module (e.g., `library_v1`), setting its level to `DEBUG`. This allows targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis-cluster/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for All Google Cloud Python Libraries (Environment)
DESCRIPTION: This snippet demonstrates how to enable the default structured logging handler for all Google-based loggers by setting an environment variable. This is a quick way to get basic logging for all Google Cloud Python modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-network-security/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google
```

----------------------------------------

TITLE: Configure Handler for Specific Google Module Programmatically in Python
DESCRIPTION: Use Python's standard `logging` mechanism to configure a handler for a specific Google client library module. This example targets 'google.cloud.library_v1', adds a `StreamHandler`, and sets its level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Module Programmatically (Python)
DESCRIPTION: Illustrates how to programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library's logger, such as `google.cloud.library_v1`. This allows fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-servicehealth/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for a Specific Google Cloud Python Module Programmatically
DESCRIPTION: This Python snippet demonstrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for a specific Google Cloud Python client library module (e.g., 'library_v1') by obtaining its specific logger instance. This allows for module-specific logging customization.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for Specific Google Module Using Python Code
DESCRIPTION: This Python code snippet shows how to configure logging for a specific Google Cloud client library module, such as `google.cloud.library_v1`. It obtains the logger for the specified module, attaches a `StreamHandler` for console output, and sets the logging level to `DEBUG`, allowing targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-apigee-registry/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Specific Google Cloud Python Module Logging with Python Code
DESCRIPTION: Programmatically configure a `StreamHandler` and set the logging level to `DEBUG` for a specific Google Cloud Python client library. This targets a particular module's logger, e.g., `google.cloud.library_v1`, for custom handling and focused debugging.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-issueresolution/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging Handler for a Specific Google Cloud Python Library in Python
DESCRIPTION: This Python snippet shows how to programmatically configure a StreamHandler and set the logging level to DEBUG for a specific Google Cloud Python client library, such as 'library_v1'. This allows fine-grained control over logging for individual modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/docs/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Module-Specific Google SDK Logging with Python Code
DESCRIPTION: This Python code snippet illustrates how to programmatically configure logging for a specific Google client library, such as `google.cloud.library_v1`. It obtains the module's logger, attaches a `StreamHandler`, and sets its level to `DEBUG`, enabling granular logging control for individual components.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-documentai/README.rst#_snippet_5

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google.cloud.library_v1")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Code-Based Logging for All Google Cloud Python Libraries
DESCRIPTION: This Python snippet illustrates how to configure a logging handler for all Google-based loggers using Python's standard `logging` mechanism. It retrieves the 'google' logger, adds a `StreamHandler` to output messages, and sets the logging level to `DEBUG`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-maps-addressvalidation/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure a StreamHandler for all Google-based loggers in Python
DESCRIPTION: This Python snippet illustrates how to programmatically configure a StreamHandler and set the logging level to DEBUG for the 'google' logger. This approach uses Python's standard logging mechanism to manage logging for all Google-related modules.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-public-ca/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Configure Logging for All Google Loggers (Python Code)
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure logging for all Google-based loggers. It obtains the 'google' logger, adds a `StreamHandler` to output logs to the console, and sets the logging level to `DEBUG` to capture all messages.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-redis/docs/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path (e.g., `google.cloud.library_v1`), enabling the default logging handler only for that particular Google Cloud Python client library. This allows for targeted logging activation.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-eventarc/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module via Environment Variable
DESCRIPTION: This snippet shows how to enable default structured logging for a specific Google Cloud Python client library, such as 'library_v1', by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable to the module's full scope. This allows targeted logging enablement without modifying application code.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-geminidataanalytics/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Handler for Specific Google Module via Environment Variable
DESCRIPTION: Set the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to a specific module path (e.g., `google.cloud.library_v1`) to enable the default logging handler only for that particular Google client library. This provides granular control via environment configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-accounts/README.rst#_snippet_2

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Module via Environment Variable
DESCRIPTION: This console command sets the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to `google.cloud.library_v1`, enabling the default logging handler specifically for the `library_v1` module within Google Cloud Python client libraries.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-apps-script-type/docs/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Install Google Cloud Parameter Manager Python Library (Mac/Linux)
DESCRIPTION: Instructions to set up a Python virtual environment and install the `google-cloud-parametermanager` library on macOS or Linux systems using `venv` and `pip`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-parametermanager/docs/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install google-cloud-parametermanager
```

----------------------------------------

TITLE: API Breaking Change: PushGitCommits Response Type
DESCRIPTION: The response type for the `PushGitCommits` method in the `Dataform` service (v1beta1) has changed from `.google.protobuf.Empty` to `.google.cloud.dataform.v1beta1.PushGitCommitsResponse`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-dataform/CHANGELOG.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Service: Dataform
Method: PushGitCommits
Old Response Type: .google.protobuf.Empty
New Response Type: .google.cloud.dataform.v1beta1.PushGitCommitsResponse
```

----------------------------------------

TITLE: Install Grafeas Python Client on Mac/Linux
DESCRIPTION: Instructions to install the Grafeas Python client library on Mac/Linux using `venv` for isolated environments. This involves creating a virtual environment, activating it, and then installing the `grafeas` package using pip.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/grafeas/README.rst#_snippet_0

LANGUAGE: console
CODE:
```
python3 -m venv <your-env>
source <your-env>/bin/activate
pip install grafeas
```

----------------------------------------

TITLE: Enable Default Logging for a Specific Google Python Module via Environment Variable
DESCRIPTION: This example shows how to enable the default logging handler for a specific Google client library module (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to the module's period-separated namespace. This provides targeted logging configuration.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-advisorynotifications/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```

----------------------------------------

TITLE: Configure Logging for All Google Python Libraries Programmatically
DESCRIPTION: This Python code snippet demonstrates how to programmatically configure a `StreamHandler` for the base `google` logger. It sets the logging level to `DEBUG` and attaches the handler, ensuring all logging events from Google-based Python libraries are captured and emitted to the console.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-cloud-optimization/README.rst#_snippet_4

LANGUAGE: python
CODE:
```
import logging

from google.cloud import library_v1

base_logger = logging.getLogger("google")
base_logger.addHandler(logging.StreamHandler())
base_logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Enable Default Logging for Specific Google Module (Environment Variable)
DESCRIPTION: This snippet shows how to enable the default logging handler for a specific Google Cloud client library (e.g., `library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable to its full scope, like `google.cloud.library_v1`.
SOURCE: https://github.com/googleapis/google-cloud-python/blob/main/packages/google-shopping-merchant-notifications/README.rst#_snippet_3

LANGUAGE: console
CODE:
```
export GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1
```