[pytest]
# GPU-Optimized pytest configuration for RunPod
pythonpath = .
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# GPU-specific test options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=5
    --durations=20
    --asyncio-mode=auto
    --disable-warnings
    -n 4
    --dist=loadscope
    --benchmark-only
    --benchmark-sort=mean
    --benchmark-warmup=on
    --benchmark-warmup-iterations=2

# Coverage options for GPU testing
# --cov=.
# --cov-report=html:gpu_coverage
# --cov-report=term-missing:skip-covered
# --cov-report=xml:gpu_coverage.xml
# --cov-fail-under=85
# --cov-branch

# Environment configuration
env_files =
    .env.gpu
    .env.test
env_override_existing_values = 1

# GPU-specific markers
markers =
    gpu: marks tests as requiring GPU acceleration
    ai_heavy: marks tests as AI computation intensive
    parallel: marks tests safe for parallel execution
    benchmark: marks tests for performance benchmarking
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    security: marks tests as security tests
    performance: marks tests as performance tests
    slow: marks tests as slow running

# Test discovery patterns
collect_ignore = [
    "setup.py",
    "conftest.py",
    "frontend/",
    "docs/",
    "scripts/",
    "alembic/",
]

# Timeout settings for GPU tests
timeout = 300
timeout_method = thread

# Parallel execution settings
dist = loadscope
tx = popen//python=python3.11

# Benchmark settings
benchmark_min_rounds = 3
benchmark_max_time = 10.0
benchmark_min_time = 0.1
benchmark_timer = time.perf_counter
benchmark_disable_gc = true
benchmark_warmup = true
benchmark_warmup_iterations = 2

# GPU memory management
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::RuntimeWarning:torch.*
